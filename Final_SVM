{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import StandardScaler#수치형"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "data=pd.read_csv('롤롤.csv',encoding='euc-kr')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "data=data.drop('gameId',axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['B승', 'B와드', 'B와드파괴', 'B퍼블', 'B킬', 'B데스', 'B어시스트', 'B엘리트몬스터', 'B드래곤전령',\n",
      "       'B전령', 'B타워파괴', 'B토탈골드', 'B평균레벨', 'B경험치', 'BCS', 'B정글몬스터', 'B골드차이',\n",
      "       'B경험치차이', 'B분당CS', 'B분당골드', 'R와드', 'R와드파괴', 'R퍼블', 'R킬', 'R데스', 'R어시스트',\n",
      "       'R엘리트몬스터', 'R드래곤', 'R전령', 'R타워파괴', 'R토탈골드', 'R평균레벨', 'R경험치', 'RCS',\n",
      "       'R정글몬스터', 'R골드차이', 'R경험치차이', 'R분당CS', 'R분당골드'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(data.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "y=data['B승']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "X=data.drop(['B승','B엘리트몬스터','B전령','B토탈골드','B경험치','BCS','B골드차이','B경험치차이',\n",
    "            'B분당골드','R와드', 'R와드파괴', 'R퍼블', 'R킬', 'R데스', 'R어시스트',\n",
    "       'R엘리트몬스터','R전령','R토탈골드','R경험치'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "X=X.drop(['R골드차이', 'R경험치차이','R분당골드'],axis=1)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   B와드  B와드파괴  B퍼블  B킬  B데스  B어시스트  B드래곤전령  B타워파괴  B평균레벨  B정글몬스터  B분당CS  R드래곤  \\\n",
      "0   28      2    1   9    6     11       0      0    6.6      36   19.5     0   \n",
      "1   12      1    0   5    5      5       0      0    6.6      43   17.4     1   \n",
      "2   15      0    0   7   11      4       1      0    6.4      46   18.6     0   \n",
      "3   43      1    0   4    5      5       0      0    7.0      55   20.1     0   \n",
      "4   75      4    0   6    6      6       0      0    7.0      57   21.0     1   \n",
      "\n",
      "   R타워파괴  R평균레벨  RCS  R정글몬스터  R분당CS  \n",
      "0      0    6.8  197      55   19.7  \n",
      "1      1    6.8  240      52   24.0  \n",
      "2      0    6.8  203      28   20.3  \n",
      "3      0    7.0  235      47   23.5  \n",
      "4      0    7.0  225      67   22.5  \n"
     ]
    }
   ],
   "source": [
    "print(X.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "X['분당cs차이']=X['B분당CS']-X['R분당CS']\n",
    "X['레벨차이']=X['B평균레벨']-X['R평균레벨']\n",
    "col=X.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      B와드  B와드파괴  B퍼블  B킬  B데스  B어시스트  B드래곤전령  B타워파괴  B평균레벨  B정글몬스터  B분당CS  \\\n",
      "0      28      2    1   9    6     11       0      0    6.6      36   19.5   \n",
      "1      12      1    0   5    5      5       0      0    6.6      43   17.4   \n",
      "2      15      0    0   7   11      4       1      0    6.4      46   18.6   \n",
      "3      43      1    0   4    5      5       0      0    7.0      55   20.1   \n",
      "4      75      4    0   6    6      6       0      0    7.0      57   21.0   \n",
      "...   ...    ...  ...  ..  ...    ...     ...    ...    ...     ...    ...   \n",
      "9874   17      2    1   7    4      5       1      0    7.2      69   21.1   \n",
      "9875   54      0    0   6    4      8       1      0    7.2      48   23.3   \n",
      "9876   23      1    0   6    7      5       0      0    7.0      45   21.0   \n",
      "9877   14      4    1   2    3      3       1      0    6.6      48   22.4   \n",
      "9878   18      0    1   6    6      5       0      0    7.0      44   20.7   \n",
      "\n",
      "      R드래곤  R타워파괴  R평균레벨  RCS  R정글몬스터  R분당CS  분당cs차이  레벨차이  \n",
      "0        0      0    6.8  197      55   19.7    -0.2  -0.2  \n",
      "1        1      1    6.8  240      52   24.0    -6.6  -0.2  \n",
      "2        0      0    6.8  203      28   20.3    -1.7  -0.4  \n",
      "3        0      0    7.0  235      47   23.5    -3.4   0.0  \n",
      "4        1      0    7.0  225      67   22.5    -1.5   0.0  \n",
      "...    ...    ...    ...  ...     ...    ...     ...   ...  \n",
      "9874     0      0    6.8  229      34   22.9    -1.8   0.4  \n",
      "9875     0      0    7.0  206      56   20.6     2.7   0.2  \n",
      "9876     1      0    7.4  261      60   26.1    -5.1  -0.4  \n",
      "9877     0      0    7.2  247      40   24.7    -2.3  -0.6  \n",
      "9878     1      0    6.8  201      46   20.1     0.6   0.2  \n",
      "\n",
      "[9879 rows x 19 columns]\n"
     ]
    }
   ],
   "source": [
    "print(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,ax=plt.subplots()\n",
    "ax.set_title('B kill')\n",
    "Bkill=np.array(X['B킬'])\n",
    "ax.boxplot(Bkill)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,ax=plt.subplots()\n",
    "ax.set_title('B kill')\n",
    "Bkill=np.array(X['B킬'])\n",
    "ax.boxplot(Bkill)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "xts=StandardScaler()\n",
    "x=xts.fit_transform(X)\n",
    "x_frame=pd.DataFrame(data=x,columns=col)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           B와드     B와드파괴       B퍼블        B킬       B데스     B어시스트    B드래곤전령  \\\n",
      "0     0.316996 -0.379275  0.990429  0.935301 -0.046926  1.071495 -0.753226   \n",
      "1    -0.570992 -0.839069 -1.009663 -0.393216 -0.387796 -0.404768 -0.753226   \n",
      "2    -0.404494 -1.298863 -1.009663  0.271042  1.657424 -0.650812  1.327623   \n",
      "3     1.149484 -0.839069 -1.009663 -0.725346 -0.387796 -0.404768 -0.753226   \n",
      "4     2.925460  0.540312 -1.009663 -0.061087 -0.046926 -0.158724 -0.753226   \n",
      "...        ...       ...       ...       ...       ...       ...       ...   \n",
      "9874 -0.293496 -0.379275  0.990429  0.271042 -0.728666 -0.404768  1.327623   \n",
      "9875  1.759976 -1.298863 -1.009663 -0.061087 -0.728666  0.333364  1.327623   \n",
      "9876  0.039499 -0.839069 -1.009663 -0.061087  0.293944 -0.404768 -0.753226   \n",
      "9877 -0.459994  0.540312  0.990429 -1.389604 -1.069536 -0.896856  1.327623   \n",
      "9878 -0.237997 -1.298863  0.990429 -0.061087 -0.046926 -0.404768 -0.753226   \n",
      "\n",
      "         B타워파괴     B평균레벨    B정글몬스터     B분당CS      R드래곤     R타워파괴     R평균레벨  \\\n",
      "0    -0.210439 -1.035635 -1.465951 -0.992782 -0.838966 -0.198353 -0.410475   \n",
      "1    -0.210439 -1.035635 -0.758722 -1.953558  1.191944  4.412301 -0.410475   \n",
      "2    -0.210439 -1.691092 -0.455624 -1.404543 -0.838966 -0.198353 -0.410475   \n",
      "3    -0.210439  0.275280  0.453671 -0.718275 -0.838966 -0.198353  0.244627   \n",
      "4    -0.210439  0.275280  0.655736 -0.306513  1.191944 -0.198353  0.244627   \n",
      "...        ...       ...       ...       ...       ...       ...       ...   \n",
      "9874 -0.210439  0.930738  1.868129 -0.260762 -0.838966 -0.198353 -0.410475   \n",
      "9875 -0.210439  0.930738 -0.253559  0.745765 -0.838966 -0.198353  0.244627   \n",
      "9876 -0.210439  0.275280 -0.556657 -0.306513  1.191944 -0.198353  1.554831   \n",
      "9877 -0.210439 -1.035635 -0.253559  0.334004 -0.838966 -0.198353  0.899729   \n",
      "9878 -0.210439  0.275280 -0.657690 -0.443767  1.191944 -0.198353 -0.410475   \n",
      "\n",
      "           RCS    R정글몬스터     R분당CS    분당cs차이      레벨차이  \n",
      "0    -0.928741  0.367685 -0.928741 -0.043642 -0.398586  \n",
      "1     1.033784  0.068504  1.033784 -2.112088 -0.398586  \n",
      "2    -0.654900 -2.324944 -0.654900 -0.528434 -0.816638  \n",
      "3     0.805583 -0.430131  0.805583 -1.077865  0.019466  \n",
      "4     0.349182  1.564408  0.349182 -0.463795  0.019466  \n",
      "...        ...       ...       ...       ...       ...  \n",
      "9874  0.531742 -1.726582  0.531742 -0.560754  0.855570  \n",
      "9875 -0.517980  0.467412 -0.517980  0.893622  0.437518  \n",
      "9876  1.992226  0.866319  1.992226 -1.627296 -0.816638  \n",
      "9877  1.353264 -1.128220  1.353264 -0.722351 -1.234690  \n",
      "9878 -0.746180 -0.529858 -0.746180  0.214913  0.437518  \n",
      "\n",
      "[9879 rows x 19 columns]\n"
     ]
    }
   ],
   "source": [
    "print(x_frame)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "X=X.drop(['B분당CS','R분당CS','B평균레벨','R평균레벨'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      B와드  B와드파괴  B퍼블  B킬  B데스  B어시스트  B드래곤전령  B타워파괴  B정글몬스터  R드래곤  R타워파괴  \\\n",
      "0      28      2    1   9    6     11       0      0      36     0      0   \n",
      "1      12      1    0   5    5      5       0      0      43     1      1   \n",
      "2      15      0    0   7   11      4       1      0      46     0      0   \n",
      "3      43      1    0   4    5      5       0      0      55     0      0   \n",
      "4      75      4    0   6    6      6       0      0      57     1      0   \n",
      "...   ...    ...  ...  ..  ...    ...     ...    ...     ...   ...    ...   \n",
      "9874   17      2    1   7    4      5       1      0      69     0      0   \n",
      "9875   54      0    0   6    4      8       1      0      48     0      0   \n",
      "9876   23      1    0   6    7      5       0      0      45     1      0   \n",
      "9877   14      4    1   2    3      3       1      0      48     0      0   \n",
      "9878   18      0    1   6    6      5       0      0      44     1      0   \n",
      "\n",
      "      RCS  R정글몬스터  분당cs차이  레벨차이  \n",
      "0     197      55    -0.2  -0.2  \n",
      "1     240      52    -6.6  -0.2  \n",
      "2     203      28    -1.7  -0.4  \n",
      "3     235      47    -3.4   0.0  \n",
      "4     225      67    -1.5   0.0  \n",
      "...   ...     ...     ...   ...  \n",
      "9874  229      34    -1.8   0.4  \n",
      "9875  206      56     2.7   0.2  \n",
      "9876  261      60    -5.1  -0.4  \n",
      "9877  247      40    -2.3  -0.6  \n",
      "9878  201      46     0.6   0.2  \n",
      "\n",
      "[9879 rows x 15 columns]\n"
     ]
    }
   ],
   "source": [
    "print(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler#수치형\n",
    "from sklearn.preprocessing import LabelEncoder#범주형\n",
    "from sklearn.metrics import confusion_matrix,classification_report\n",
    "from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score,make_scorer#정확도,민감도등\n",
    "\n",
    "from sklearn.model_selection import cross_validate #교차타당도\n",
    "from sklearn.pipeline import make_pipeline#파이프라인구축\n",
    "from sklearn.model_selection import learning_curve#학습곡선,검증곡선\n",
    "from sklearn.model_selection import GridSearchCV #하이퍼파라미티튜닝\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train,X_test,y_train,y_test=\\\n",
    "    train_test_split(X,y,\n",
    "    test_size=0.4,\n",
    "    train_size=0.6,\n",
    "    random_state=12354,\n",
    "    shuffle=True)\n",
    "\n",
    "\n",
    "stdc=StandardScaler()\n",
    "X_train=stdc.fit_transform(X_train)\n",
    "X_test=stdc.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "support=SVC(C=1.1,kernel='sigmoid',gamma='scale',coef0=0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(C=1.1, break_ties=False, cache_size=200, class_weight=None, coef0=0.5,\n",
       "    decision_function_shape='ovr', degree=3, gamma='scale', kernel='sigmoid',\n",
       "    max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
       "    tol=0.001, verbose=False)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "support.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.model_selection import GroupKFold\n",
    "\n",
    "kfold=StratifiedKFold(n_splits=10,shuffle=True)\n",
    "group=GroupKFold(n_splits=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred=support.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "confu=confusion_matrix(y_test,y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "dt=pd.DataFrame(data=confu,columns=['pred0','perd1'],index=['ture0','true1'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       pred0  perd1\n",
      "ture0   1234    691\n",
      "true1    751   1276\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.62      0.64      0.63      1925\n",
      "           1       0.65      0.63      0.64      2027\n",
      "\n",
      "    accuracy                           0.64      3952\n",
      "   macro avg       0.64      0.64      0.64      3952\n",
      "weighted avg       0.64      0.64      0.64      3952\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(dt)\n",
    "print(classification_report(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import cross_validate\n",
    "\n",
    "kfold2=cross_validate(estimator=support,X=X_train,y=y_train,scoring='accuracy',\n",
    "                     cv=kfold,n_jobs=-1,return_train_score=True)\n",
    "                     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.6424775534387676\n"
     ]
    }
   ],
   "source": [
    "print(kfold2['test_score'].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.6402338449493251\n"
     ]
    }
   ],
   "source": [
    "print(kfold2['train_score'].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_score_mean=kfold2['test_score'].mean()\n",
    "test_score_std=kfold2['test_score'].std()\n",
    "train_score_mean=kfold2['train_score'].mean()\n",
    "train_score_std=kfold2['train_score'].std()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import validation_curve\n",
    "\n",
    "\n",
    "#train_scroes,valid_scores=validation_curve(support,X=X_train,y=y_train,param_name='support',\n",
    "#                                          param_range=np.linspace(16,) \n",
    "#                                          cv=kfold)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_sizes,train_scores,test_scores=\\\n",
    "    learning_curve(estimator=support,#수정\n",
    "    X=X_train,\n",
    "    y=y_train,\n",
    "    train_sizes=np.linspace(0.1,1.0,10),\n",
    "    n_jobs=-1,\n",
    "    cv=kfold)\n",
    "train_mean=np.mean(train_scores,axis=1)\n",
    "train_std=np.std(train_scores,axis=1)\n",
    "test_mean=np.mean(test_scores,axis=1)\n",
    "\n",
    "test_std=np.std(test_scores,axis=1)\n",
    "\n",
    "plt.plot(train_sizes,train_mean,\n",
    "color='blue',marker='o',\n",
    "markersize=5,label='training accuracy')\n",
    "\n",
    "plt.fill_between(train_sizes,\n",
    "train_mean+train_std,\n",
    "train_mean-train_std,\n",
    "alpha=0.5,color='blue')\n",
    "\n",
    "plt.plot(train_sizes,test_mean,\n",
    "color='green',linestyle='--',\n",
    "marker='s',markersize=5,\n",
    "label='validation accuracy')\n",
    "plt.fill_between(train_sizes,\n",
    "test_mean+test_std,\n",
    "test_mean-test_std,\n",
    "alpha=0.15,color='green')\n",
    "\n",
    "plt.grid()\n",
    "plt.xlabel('number of trainning samples')\n",
    "plt.ylabel('accuracy')\n",
    "plt.legend(loc='lower right')\n",
    "plt.ylim([0,1.03])#수정  y값의 범위\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.pipeline import make_pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "pipe=make_pipeline(PCA(),SVC())\n",
    "#pipe=make_pipeline(SVC())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys(['memory', 'steps', 'verbose', 'pca', 'svc', 'pca__copy', 'pca__iterated_power', 'pca__n_components', 'pca__random_state', 'pca__svd_solver', 'pca__tol', 'pca__whiten', 'svc__C', 'svc__break_ties', 'svc__cache_size', 'svc__class_weight', 'svc__coef0', 'svc__decision_function_shape', 'svc__degree', 'svc__gamma', 'svc__kernel', 'svc__max_iter', 'svc__probability', 'svc__random_state', 'svc__shrinking', 'svc__tol', 'svc__verbose'])\n"
     ]
    }
   ],
   "source": [
    "print(pipe.get_params().keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "param_components=[1,2,3,4,5,6,7,8,9,10,11,12]\n",
    "parma_C=[0.05,0.1,0.2,0.3,0.4,0.5,0.8,0.9,0.75,1.1,1.2,1.3]\n",
    "param_kernael=['poly','rbf','sigmoid']\n",
    "param_gamma=['scale','auto',0.5,1.5,2.5,3.1]\n",
    "distribution=[{'pca__n_components':param_components,'svc__C':parma_C,'svc__kernel':param_kernael,\n",
    "             'svc__gamma':param_gamma}]\n",
    "#distribution={'svc__C':parma_C,'svc__kernel':param_kernael}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "random=GridSearchCV(estimator=pipe,param_grid=distribution,n_jobs=-1,\n",
    "                         scoring='accuracy',cv=kfold)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "ename": "TerminatedWorkerError",
     "evalue": "A worker process managed by the executor was unexpectedly terminated. This could be caused by a segmentation fault while calling the function or by an excessive memory usage causing the Operating System to kill the worker. The exit codes of the workers are {SIGABRT(-6), SIGABRT(-6), SIGABRT(-6), SIGABRT(-6), SIGABRT(-6), SIGABRT(-6), SIGABRT(-6), SIGABRT(-6), SIGABRT(-6), SIGABRT(-6), SIGABRT(-6), SIGABRT(-6), SIGABRT(-6), SIGABRT(-6), SIGABRT(-6), SIGABRT(-6)}",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTerminatedWorkerError\u001b[0m                     Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-40-61b90a33b24b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m#infinity loop\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    708\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    709\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 710\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    711\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    712\u001b[0m         \u001b[0;31m# For multi-metric evaluation, store the best_index_, best_params_ and\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36m_run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1149\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1150\u001b[0m         \u001b[0;34m\"\"\"Search all candidates in param_grid\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1151\u001b[0;31m         \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mParameterGrid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1152\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1153\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mevaluate_candidates\u001b[0;34m(candidate_params)\u001b[0m\n\u001b[1;32m    687\u001b[0m                                \u001b[0;32mfor\u001b[0m \u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    688\u001b[0m                                in product(candidate_params,\n\u001b[0;32m--> 689\u001b[0;31m                                           cv.split(X, y, groups)))\n\u001b[0m\u001b[1;32m    690\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    691\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1015\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1016\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieval_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1017\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1018\u001b[0m             \u001b[0;31m# Make sure that we get a last message telling us we are done\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1019\u001b[0m             \u001b[0melapsed_time\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_start_time\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mretrieve\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    907\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    908\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'supports_timeout'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 909\u001b[0;31m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    910\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    911\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mwrap_future_result\u001b[0;34m(future, timeout)\u001b[0m\n\u001b[1;32m    560\u001b[0m         AsyncResults.get from multiprocessing.\"\"\"\n\u001b[1;32m    561\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 562\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfuture\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    563\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mLokyTimeoutError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    564\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mTimeoutError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/concurrent/futures/_base.py\u001b[0m in \u001b[0;36mresult\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    433\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mCancelledError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    434\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_state\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mFINISHED\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 435\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__get_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    436\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    437\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mTimeoutError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/concurrent/futures/_base.py\u001b[0m in \u001b[0;36m__get_result\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    382\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__get_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    383\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_exception\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 384\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_exception\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    385\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    386\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_result\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTerminatedWorkerError\u001b[0m: A worker process managed by the executor was unexpectedly terminated. This could be caused by a segmentation fault while calling the function or by an excessive memory usage causing the Operating System to kill the worker. The exit codes of the workers are {SIGABRT(-6), SIGABRT(-6), SIGABRT(-6), SIGABRT(-6), SIGABRT(-6), SIGABRT(-6), SIGABRT(-6), SIGABRT(-6), SIGABRT(-6), SIGABRT(-6), SIGABRT(-6), SIGABRT(-6), SIGABRT(-6), SIGABRT(-6), SIGABRT(-6), SIGABRT(-6)}"
     ]
    }
   ],
   "source": [
    "random.fit(X_train,y_train) #infinity loop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'GridSearchCV' object has no attribute 'best_score_'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-41-21ff92ccd5c6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbest_score_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m: 'GridSearchCV' object has no attribute 'best_score_'"
     ]
    }
   ],
   "source": [
    "print(random.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-42-3ad94f6d4247>, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-42-3ad94f6d4247>\"\u001b[0;36m, line \u001b[0;32m2\u001b[0m\n\u001b[0;31m    pca 8   c:0.2 kernel poly\u001b[0m\n\u001b[0m        ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "print(random.best_estimator_)\n",
    "pca 8   c:0.2 kernel poly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'GridSearchCV' object has no attribute 'best_estimator_'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-43-ef359a42950a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mbest\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbest_estimator_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0my_best\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'GridSearchCV' object has no attribute 'best_estimator_'"
     ]
    }
   ],
   "source": [
    "best=random.best_estimator_\n",
    "y_best=best.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'y_best' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-44-ed3207a03fe2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetrics\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mconfusion_matrix\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mconfu2\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mconfusion_matrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_best\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mdt2\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mconfu2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'pred0'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'perd1'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'ture0'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'true1'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdt2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclassification_report\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_best\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'y_best' is not defined"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "confu2=confusion_matrix(y_test,y_best)\n",
    "dt2=pd.DataFrame(data=confu2,columns=['pred0','perd1'],index=['ture0','true1'])\n",
    "print(dt2)\n",
    "print(classification_report(y_test,y_best))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
