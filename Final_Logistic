{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.4990383642069035\n",
      "4930\n",
      "4949\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "data=pd.read_csv(r'롤롤.csv',encoding='euc-kr')\n",
    "#print(data.info())\n",
    "#print(data.shape)\n",
    "#print(data.isnull().sum())\n",
    "\n",
    "data=data.drop('gameId',axis=1)\n",
    "# id 는 모델 분류하는데 영향을 미치지 않으므로 제거\n",
    "lose=data[data['B승']==0]\n",
    "win=data[data['B승']==1]\n",
    "print(win.shape[0]/(win.shape[0]+lose.shape[0]))\n",
    "print(win.shape[0])\n",
    "print(lose.shape[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#data=data[data.columns[:20]]\n",
    "#data=data.drop(['B토탈골드','B경험치','B엘리트몬스터','B전령','BCS','B분당골드'],axis=1)\n",
    "#print(data.head())\n",
    "#b의 승은 b의 얻은량에 영향을 받으므로  레드팀에것은 제거\n",
    "y=data['B승']\n",
    "#X=data.drop('B승',axis=1)\n",
    "X=data.drop(['B승','B엘리트몬스터','B전령','B토탈골드','B경험치','BCS','B골드차이','B경험치차이',\n",
    "            'B분당골드','R와드', 'R와드파괴', 'R퍼블', 'R킬', 'R데스', 'R어시스트',\n",
    "       'R엘리트몬스터','R전령','R토탈골드','R경험치'],axis=1)\n",
    "X=X.drop(['R골드차이', 'R경험치차이','R분당골드'],axis=1)\n",
    "X['분당cs차이']=X['B분당CS']-X['R분당CS']\n",
    "X['레벨차이']=X['B평균레벨']-X['R평균레벨']\n",
    "X=X.drop(['B분당CS','R분당CS','B평균레벨','R평균레벨'],axis=1)\n",
    "t=X\n",
    "col=X.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler#수치형\n",
    "from sklearn.preprocessing import LabelEncoder#범주형"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix,classification_report\n",
    "from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score,make_scorer#정확도,민감도등\n",
    "from sklearn.metrics import roc_curve #roc곡선그리기\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#최적화\n",
    "from sklearn.model_selection import cross_validate #교차타당도\n",
    "from sklearn.pipeline import make_pipeline#파이프라인구축\n",
    "from sklearn.model_selection import learning_curve#학습곡선,검증곡선\n",
    "from sklearn.model_selection import GridSearchCV #하이퍼파라미티튜닝\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train,X_test,y_train,y_test=\\\n",
    "    train_test_split(X,y,\n",
    "    test_size=0.4,\n",
    "    train_size=0.6,\n",
    "    random_state=12354,\n",
    "    shuffle=True)\n",
    "\n",
    "\n",
    "stdc=StandardScaler()\n",
    "X_train=stdc.fit_transform(X_train)\n",
    "X_test=stdc.transform(X_test)\n",
    "#x 데이터들을 표준화실시"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#모델구축\n",
    "logic=LogisticRegression(penalty='elasticnet',solver='saga',n_jobs=-1,l1_ratio=0.4)\n",
    "logic.fit(X_train,y_train)\n",
    "y_pred=logic.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "confmat=pd.DataFrame(confusion_matrix(y_test,y_pred),\n",
    "index=['True[0]','True[1]'],\n",
    "columns=['Predict[0]','predict[1]'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         Predict[0]  predict[1]\n",
      "True[0]        1410         515\n",
      "True[1]         595        1432\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.70      0.73      0.72      1925\n",
      "           1       0.74      0.71      0.72      2027\n",
      "\n",
      "    accuracy                           0.72      3952\n",
      "   macro avg       0.72      0.72      0.72      3952\n",
      "weighted avg       0.72      0.72      0.72      3952\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(confmat)\n",
    "print(classification_report(y_test,y_pred)) \n",
    "# 현재 정확도 73%\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "from sklearn.metrics import auc\n",
    "from sklearn.metrics import plot_roc_curve\n",
    "\n",
    "#동일한분포 아닐경우\n",
    "from sklearn.model_selection import RepeatedKFold\n",
    "#동일한분포이며, 특징들이 독립적일경우\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.model_selection import KFold\n",
    "repert=RepeatedKFold(n_splits=10,n_repeats=10)\n",
    "stkfold=StratifiedKFold(n_splits=10,shuffle=True)\n",
    "fold=KFold(n_splits=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_sizes,train_scores,test_scores=\\\n",
    "    learning_curve(estimator=logic,#수정\n",
    "    X=X_train,\n",
    "    y=y_train,\n",
    "    train_sizes=np.linspace(0.1,1.0,10),\n",
    "    n_jobs=-1,\n",
    "    cv=fold)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "train_mean=np.mean(train_scores,axis=1)\n",
    "train_std=np.std(train_scores,axis=1)\n",
    "test_mean=np.mean(test_scores,axis=1)\n",
    "\n",
    "test_std=np.std(test_scores,axis=1)\n",
    "\n",
    "plt.plot(train_sizes,train_mean,\n",
    "color='blue',marker='o',\n",
    "markersize=5,label='training accuracy')\n",
    "\n",
    "plt.fill_between(train_sizes,\n",
    "train_mean+train_std,\n",
    "train_mean-train_std,\n",
    "alpha=0.5,color='blue')\n",
    "\n",
    "plt.plot(train_sizes,test_mean,\n",
    "color='green',linestyle='--',\n",
    "marker='s',markersize=5,\n",
    "label='validation accuracy')\n",
    "plt.fill_between(train_sizes,\n",
    "test_mean+test_std,\n",
    "test_mean-test_std,\n",
    "alpha=0.15,color='green')\n",
    "\n",
    "plt.grid()\n",
    "plt.xlabel('number of trainning samples')\n",
    "plt.ylabel('accuracy')\n",
    "plt.legend(loc='lower right')\n",
    "plt.ylim([0,1.03])#수정  y값의 범위\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#roc_auc_score\n",
    "fpr,tpr,thresholds=roc_curve(y_test,logic.predict_proba(X_test)[:,1])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(fpr,tpr,'--',label='logic')\n",
    "plt.plot([0,1],[0,1],'-',label='50%')\n",
    "plt.plot([fpr],[tpr],'r-',ms=10)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import auc\n",
    "from sklearn.metrics import plot_roc_curve\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "cross_kfold=cross_validate(estimator=logic,X=X_train,y=y_train,cv=fold,n_jobs=-1,\n",
    "                          scoring=['accuracy','roc_auc'])\n",
    "\n",
    "cross_repeat=cross_validate(estimator=logic,X=X_train,y=y_train,cv=repert,n_jobs=-1,scoring=['accuracy','roc_auc'])\n",
    "                          \n",
    "normal=cross_validate(estimator=logic,X=X_train,y=y_train,cv=10,n_jobs=-1,\n",
    "                          scoring=['accuracy','roc_auc'])\n",
    "\n",
    "cross_stfold=cross_validate(estimator=logic,X=X_train,y=y_train,cv=stkfold,n_jobs=-1,\n",
    "                          scoring=['accuracy','roc_auc'])\n",
    "#scoring 은 https://scikit-learn.org/stable/modules/model_evaluation.html#scoring-parameter\n",
    "#에서 참고"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "kfold정확도 test평균점수: 72.65037486896676\n",
      "kfold정확도 test표준편차: 2.1192636172180803\n"
     ]
    }
   ],
   "source": [
    "print(\"kfold정확도 test평균점수:\",cross_kfold['test_accuracy'].mean()*100)\n",
    "print(\"kfold정확도 test표준편차:\",cross_kfold['test_accuracy'].std()*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "72.62873159837748\n",
      "1.7310587889376252\n"
     ]
    }
   ],
   "source": [
    "print(cross_repeat['test_accuracy'].mean()*100)\n",
    "print(cross_repeat['test_accuracy'].std()*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "72.75146985096394\n",
      "2.00191240814248\n",
      "0.7270110751561004\n",
      "0.010466136999560335\n"
     ]
    }
   ],
   "source": [
    "print(normal['test_accuracy'].mean()*100)\n",
    "print(normal['test_accuracy'].std()*100)\n",
    "\n",
    "print(cross_stfold['test_accuracy'].mean())\n",
    "print(cross_stfold['test_accuracy'].std())\n",
    "#별차이가 없다"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "#하이퍼 파라미터값들을 랜덤적으로 지정해서 최상의 것을 찾는다\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "#사용자가 지정한 범위내에 있는 요소들중 가장 기능이 좋은 하이퍼 파라미터를 찾는다\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.decomposition import PCA\n",
    "#print(logic.get_params())\n",
    "# 로지스틱의 하이퍼 파마미터 출력"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "#param={'dual':True,'class_wight':'balanced'}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "#random=RandomizedSearchCV(estimator=logic,n_iter=1,scoring='accuracy',n_jobs=-1,\n",
    "#                         pre_dispatch=5,cv=cross_kfold,\n",
    "#                         param_distributions=param)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "#random.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "#paran_dist={'C':np.linspace(0.1,10,1).tolist(),\n",
    "#            'max_iter':np.linspace(10,100,10).tolist(),\n",
    "#            'l1_ratios':[0.1,0.3,0.4,0.8]\n",
    "#           }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "#grid=GridSearchCV(estimator=logic,param_grid=paran_dist,n_jobs=-1,cv=10,scoring='accuracy')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "#grid.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "#print(logic.get_params())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "logicpipe=make_pipeline(LogisticRegression(penalty='elasticnet',solver='saga',l1_ratio=0.5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys(['memory', 'steps', 'verbose', 'logisticregression', 'logisticregression__C', 'logisticregression__class_weight', 'logisticregression__dual', 'logisticregression__fit_intercept', 'logisticregression__intercept_scaling', 'logisticregression__l1_ratio', 'logisticregression__max_iter', 'logisticregression__multi_class', 'logisticregression__n_jobs', 'logisticregression__penalty', 'logisticregression__random_state', 'logisticregression__solver', 'logisticregression__tol', 'logisticregression__verbose', 'logisticregression__warm_start'])\n"
     ]
    }
   ],
   "source": [
    "print(logicpipe.get_params().keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(memory=None,\n",
       "         steps=[('logisticregression',\n",
       "                 LogisticRegression(C=1.0, class_weight=None, dual=False,\n",
       "                                    fit_intercept=True, intercept_scaling=1,\n",
       "                                    l1_ratio=0.5, max_iter=100,\n",
       "                                    multi_class='auto', n_jobs=None,\n",
       "                                    penalty='elasticnet', random_state=None,\n",
       "                                    solver='saga', tol=0.0001, verbose=0,\n",
       "                                    warm_start=False))],\n",
       "         verbose=False)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logicpipe.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "#param_pca=[1,2,3,4,5,6,7,8,9]\n",
    "param_l1_ratio=[0.1,0.2,0.3,0.4,0.5,0.6,0.7]\n",
    "param_penalty=['elasticnet']\n",
    "param_solver=['saga']\n",
    "param_c=[0.2,0.3,0.4,0.5,0.6,0.9,1,1.2,1.5,1.7]\n",
    "\n",
    "param_gid=[{'logisticregression__l1_ratio':param_l1_ratio,\n",
    "           'logisticregression__solver':param_solver,\n",
    "           'logisticregression__C':param_c},\n",
    "          {'logisticregression__penalty':['l2'],\n",
    "           'logisticregression__C':param_c,\n",
    "           'logisticregression__solver':['sag','newton-cg','lbfgs']}]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "gs=GridSearchCV(estimator=logicpipe,param_grid=param_gid,scoring='accuracy',cv=repert,n_jobs=-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=RepeatedKFold(n_repeats=10, n_splits=10, random_state=None),\n",
       "             error_score=nan,\n",
       "             estimator=Pipeline(memory=None,\n",
       "                                steps=[('logisticregression',\n",
       "                                        LogisticRegression(C=1.0,\n",
       "                                                           class_weight=None,\n",
       "                                                           dual=False,\n",
       "                                                           fit_intercept=True,\n",
       "                                                           intercept_scaling=1,\n",
       "                                                           l1_ratio=0.5,\n",
       "                                                           max_iter=100,\n",
       "                                                           multi_class='auto',\n",
       "                                                           n_jobs=None,\n",
       "                                                           penalty='elasticnet',\n",
       "                                                           random_state=None,\n",
       "                                                           solver='sag...\n",
       "                          'logisticregression__l1_ratio': [0.1, 0.2, 0.3, 0.4,\n",
       "                                                           0.5, 0.6, 0.7],\n",
       "                          'logisticregression__solver': ['saga']},\n",
       "                         {'logisticregression__C': [0.2, 0.3, 0.4, 0.5, 0.6,\n",
       "                                                    0.9, 1, 1.2, 1.5, 1.7],\n",
       "                          'logisticregression__penalty': ['l2'],\n",
       "                          'logisticregression__solver': ['sag', 'newton-cg',\n",
       "                                                         'lbfgs']}],\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring='accuracy', verbose=0)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gs.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'mean_fit_time': array([0.02117744, 0.02675838, 0.02993533, 0.0295671 , 0.02970736,\n",
      "       0.02955477, 0.03074593, 0.03275246, 0.03321219, 0.03168513,\n",
      "       0.03254667, 0.03333946, 0.0315308 , 0.03165827, 0.03542364,\n",
      "       0.03300471, 0.03288883, 0.03389035, 0.03323231, 0.03355132,\n",
      "       0.03343409, 0.03370371, 0.03245897, 0.03218115, 0.03242551,\n",
      "       0.0339029 , 0.03357099, 0.0336798 , 0.034363  , 0.03508862,\n",
      "       0.03185272, 0.03692773, 0.03732841, 0.03724437, 0.03586372,\n",
      "       0.04065323, 0.04490098, 0.04540234, 0.04510949, 0.04419521,\n",
      "       0.04358263, 0.04732673, 0.04383906, 0.04419637, 0.04614712,\n",
      "       0.04444652, 0.04016907, 0.04169254, 0.06075054, 0.08376663,\n",
      "       0.06588215, 0.06020674, 0.06373941, 0.0635627 , 0.06677549,\n",
      "       0.06775725, 0.06253265, 0.06705702, 0.07957737, 0.0822056 ,\n",
      "       0.07961853, 0.07935168, 0.08195754, 0.08516482, 0.08292639,\n",
      "       0.0796672 , 0.0765096 , 0.07345207, 0.07167332, 0.05501544,\n",
      "       0.07711263, 0.07403731, 0.04368929, 0.26724433, 0.33296984,\n",
      "       0.22331018, 0.31126714, 0.24617462, 0.18092449, 0.13229808,\n",
      "       0.23295077, 0.08412053, 0.15963192, 0.36771227, 0.09825965,\n",
      "       0.25059284, 0.74804055, 0.33623405, 0.25156699, 0.35724456,\n",
      "       0.12242214, 0.28497466, 0.19468744, 0.2621141 , 0.38386633,\n",
      "       0.24199818, 0.105526  , 0.17097232, 0.29844409, 0.11126672]), 'std_fit_time': array([0.00294652, 0.00396997, 0.00255959, 0.0022923 , 0.00266268,\n",
      "       0.00299794, 0.00264105, 0.00291311, 0.00333002, 0.00283665,\n",
      "       0.00318303, 0.00316014, 0.00287062, 0.00293862, 0.00468576,\n",
      "       0.00303   , 0.00296446, 0.00890374, 0.00260222, 0.00500207,\n",
      "       0.00334613, 0.00516214, 0.00219639, 0.00238371, 0.00302434,\n",
      "       0.00302818, 0.00288783, 0.00382552, 0.00363314, 0.00319538,\n",
      "       0.00719373, 0.00496424, 0.00418363, 0.00391775, 0.00386046,\n",
      "       0.00572666, 0.00471532, 0.00389572, 0.00378735, 0.00390412,\n",
      "       0.00494744, 0.00546053, 0.00436341, 0.00460173, 0.00441343,\n",
      "       0.00494578, 0.00388667, 0.00592244, 0.04108269, 0.03180684,\n",
      "       0.00817786, 0.00656811, 0.00810929, 0.00852439, 0.01495818,\n",
      "       0.01601098, 0.00775307, 0.02249853, 0.02745158, 0.01356635,\n",
      "       0.01108919, 0.01047056, 0.01054358, 0.00790928, 0.00892178,\n",
      "       0.00974377, 0.00830117, 0.00867343, 0.00860804, 0.01293453,\n",
      "       0.03972306, 0.02349659, 0.00983056, 0.33199512, 0.4654093 ,\n",
      "       0.33927636, 0.26225093, 0.20439406, 0.22951902, 0.06478278,\n",
      "       0.13316872, 0.07246402, 0.08284537, 0.39772536, 0.18672637,\n",
      "       0.18177236, 0.60573461, 0.33910337, 0.21220306, 0.45701003,\n",
      "       0.22817665, 0.22322801, 0.11759949, 0.30987418, 0.37854513,\n",
      "       0.13532106, 0.07420203, 0.1458076 , 0.28678659, 0.08947998]), 'mean_score_time': array([0.00047868, 0.00054891, 0.00058338, 0.00057672, 0.00057299,\n",
      "       0.00058288, 0.00060333, 0.00069204, 0.00062924, 0.00061001,\n",
      "       0.0006203 , 0.00062683, 0.00067475, 0.0006463 , 0.00073312,\n",
      "       0.00061684, 0.0006266 , 0.00063025, 0.00064239, 0.00063302,\n",
      "       0.00063695, 0.00063284, 0.00062564, 0.00062287, 0.00063776,\n",
      "       0.0006528 , 0.00063446, 0.00065323, 0.0006882 , 0.00067752,\n",
      "       0.00064407, 0.00068399, 0.00074571, 0.00071953, 0.00067872,\n",
      "       0.00079692, 0.00077454, 0.0008419 , 0.00082178, 0.00080998,\n",
      "       0.00078072, 0.00090428, 0.00076414, 0.0008351 , 0.00084072,\n",
      "       0.00082716, 0.00075125, 0.00091363, 0.00145894, 0.00098749,\n",
      "       0.00118836, 0.00135961, 0.00100683, 0.00122054, 0.00120533,\n",
      "       0.00142678, 0.00116972, 0.0012312 , 0.0014975 , 0.00154957,\n",
      "       0.00206645, 0.00165055, 0.00234222, 0.00153557, 0.00186697,\n",
      "       0.00118315, 0.00098389, 0.000966  , 0.00127126, 0.0009466 ,\n",
      "       0.00086102, 0.00090404, 0.0009539 , 0.00082007, 0.00089908,\n",
      "       0.00079254, 0.00077216, 0.00093071, 0.00094711, 0.0007373 ,\n",
      "       0.00088942, 0.00075044, 0.00082273, 0.00072312, 0.0006625 ,\n",
      "       0.00070444, 0.00073445, 0.00076399, 0.00074377, 0.00090351,\n",
      "       0.00071349, 0.00074345, 0.00085551, 0.00076049, 0.00071258,\n",
      "       0.00115678, 0.00078758, 0.00075057, 0.00082648, 0.00075396]), 'std_score_time': array([7.39274223e-05, 7.71972608e-05, 4.64608983e-05, 3.58827616e-05,\n",
      "       5.45019813e-05, 4.69329879e-05, 2.36859424e-04, 4.99258245e-04,\n",
      "       1.39537749e-04, 7.80668813e-05, 9.49052930e-05, 1.19767440e-04,\n",
      "       6.37851965e-04, 2.83311387e-04, 4.01675276e-04, 5.15592385e-05,\n",
      "       8.75015526e-05, 7.26109360e-05, 1.85293391e-04, 9.17844838e-05,\n",
      "       1.10055247e-04, 1.02506004e-04, 1.22193089e-04, 1.76874510e-04,\n",
      "       2.48378913e-04, 2.25058670e-04, 1.15218559e-04, 2.12388773e-04,\n",
      "       2.46760197e-04, 1.17448204e-04, 2.59780974e-04, 1.17766570e-04,\n",
      "       3.28422106e-04, 6.18754106e-04, 3.39314870e-04, 4.39993062e-04,\n",
      "       1.90703907e-04, 3.32388239e-04, 2.22409058e-04, 2.68036604e-04,\n",
      "       1.48603308e-04, 5.02815337e-04, 2.10893978e-04, 4.92358152e-04,\n",
      "       2.85180014e-04, 3.41595554e-04, 4.00195334e-04, 8.19728185e-04,\n",
      "       3.76746654e-03, 1.77226439e-03, 1.94917723e-03, 2.18357494e-03,\n",
      "       1.20419392e-03, 1.84028967e-03, 1.74825955e-03, 2.39230129e-03,\n",
      "       1.80314796e-03, 2.06752793e-03, 3.19012132e-03, 3.27633319e-03,\n",
      "       4.25725868e-03, 3.19193677e-03, 4.18490410e-03, 2.88974207e-03,\n",
      "       3.63858063e-03, 2.16845599e-03, 1.71979547e-03, 1.71629769e-03,\n",
      "       2.38026168e-03, 1.46272340e-03, 5.75216586e-04, 4.88264415e-04,\n",
      "       3.63105020e-04, 2.67219956e-04, 8.88545567e-04, 1.91141620e-04,\n",
      "       1.82690074e-04, 1.83281003e-04, 1.47528390e-04, 1.46077518e-04,\n",
      "       1.87249002e-04, 9.92923488e-05, 2.36494717e-04, 1.38385835e-04,\n",
      "       8.47610650e-05, 6.73685818e-05, 1.44564022e-04, 1.59444360e-04,\n",
      "       1.06200312e-04, 3.52636678e-04, 1.13041442e-04, 8.23562369e-05,\n",
      "       2.51550814e-04, 2.25459195e-04, 5.92439117e-05, 1.52753565e-03,\n",
      "       2.55060397e-04, 1.18912856e-04, 3.78110625e-04, 9.03938622e-05]), 'param_logisticregression__C': masked_array(data=[0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.3, 0.3, 0.3, 0.3,\n",
      "                   0.3, 0.3, 0.3, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.5,\n",
      "                   0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.6, 0.6, 0.6, 0.6, 0.6,\n",
      "                   0.6, 0.6, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 1, 1, 1,\n",
      "                   1, 1, 1, 1, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.5,\n",
      "                   1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.7, 1.7, 1.7, 1.7, 1.7,\n",
      "                   1.7, 1.7, 0.2, 0.2, 0.2, 0.3, 0.3, 0.3, 0.4, 0.4, 0.4,\n",
      "                   0.5, 0.5, 0.5, 0.6, 0.6, 0.6, 0.9, 0.9, 0.9, 1, 1, 1,\n",
      "                   1.2, 1.2, 1.2, 1.5, 1.5, 1.5, 1.7, 1.7, 1.7],\n",
      "             mask=[False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False],\n",
      "       fill_value='?',\n",
      "            dtype=object), 'param_logisticregression__l1_ratio': masked_array(data=[0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.1, 0.2, 0.3, 0.4,\n",
      "                   0.5, 0.6, 0.7, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.1,\n",
      "                   0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.1, 0.2, 0.3, 0.4, 0.5,\n",
      "                   0.6, 0.7, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.1, 0.2,\n",
      "                   0.3, 0.4, 0.5, 0.6, 0.7, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6,\n",
      "                   0.7, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.1, 0.2, 0.3,\n",
      "                   0.4, 0.5, 0.6, 0.7, --, --, --, --, --, --, --, --, --,\n",
      "                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,\n",
      "                   --, --, --, --, --, --, --],\n",
      "             mask=[False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False,  True,  True,\n",
      "                    True,  True,  True,  True,  True,  True,  True,  True,\n",
      "                    True,  True,  True,  True,  True,  True,  True,  True,\n",
      "                    True,  True,  True,  True,  True,  True,  True,  True,\n",
      "                    True,  True,  True,  True],\n",
      "       fill_value='?',\n",
      "            dtype=object), 'param_logisticregression__solver': masked_array(data=['saga', 'saga', 'saga', 'saga', 'saga', 'saga', 'saga',\n",
      "                   'saga', 'saga', 'saga', 'saga', 'saga', 'saga', 'saga',\n",
      "                   'saga', 'saga', 'saga', 'saga', 'saga', 'saga', 'saga',\n",
      "                   'saga', 'saga', 'saga', 'saga', 'saga', 'saga', 'saga',\n",
      "                   'saga', 'saga', 'saga', 'saga', 'saga', 'saga', 'saga',\n",
      "                   'saga', 'saga', 'saga', 'saga', 'saga', 'saga', 'saga',\n",
      "                   'saga', 'saga', 'saga', 'saga', 'saga', 'saga', 'saga',\n",
      "                   'saga', 'saga', 'saga', 'saga', 'saga', 'saga', 'saga',\n",
      "                   'saga', 'saga', 'saga', 'saga', 'saga', 'saga', 'saga',\n",
      "                   'saga', 'saga', 'saga', 'saga', 'saga', 'saga', 'saga',\n",
      "                   'sag', 'newton-cg', 'lbfgs', 'sag', 'newton-cg',\n",
      "                   'lbfgs', 'sag', 'newton-cg', 'lbfgs', 'sag',\n",
      "                   'newton-cg', 'lbfgs', 'sag', 'newton-cg', 'lbfgs',\n",
      "                   'sag', 'newton-cg', 'lbfgs', 'sag', 'newton-cg',\n",
      "                   'lbfgs', 'sag', 'newton-cg', 'lbfgs', 'sag',\n",
      "                   'newton-cg', 'lbfgs', 'sag', 'newton-cg', 'lbfgs'],\n",
      "             mask=[False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False],\n",
      "       fill_value='?',\n",
      "            dtype=object), 'param_logisticregression__penalty': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,\n",
      "                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,\n",
      "                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,\n",
      "                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,\n",
      "                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,\n",
      "                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',\n",
      "                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',\n",
      "                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',\n",
      "                   'l2', 'l2', 'l2'],\n",
      "             mask=[ True,  True,  True,  True,  True,  True,  True,  True,\n",
      "                    True,  True,  True,  True,  True,  True,  True,  True,\n",
      "                    True,  True,  True,  True,  True,  True,  True,  True,\n",
      "                    True,  True,  True,  True,  True,  True,  True,  True,\n",
      "                    True,  True,  True,  True,  True,  True,  True,  True,\n",
      "                    True,  True,  True,  True,  True,  True,  True,  True,\n",
      "                    True,  True,  True,  True,  True,  True,  True,  True,\n",
      "                    True,  True,  True,  True,  True,  True,  True,  True,\n",
      "                    True,  True,  True,  True,  True,  True, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False],\n",
      "       fill_value='?',\n",
      "            dtype=object), 'params': [{'logisticregression__C': 0.2, 'logisticregression__l1_ratio': 0.1, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.2, 'logisticregression__l1_ratio': 0.2, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.2, 'logisticregression__l1_ratio': 0.3, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.2, 'logisticregression__l1_ratio': 0.4, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.2, 'logisticregression__l1_ratio': 0.5, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.2, 'logisticregression__l1_ratio': 0.6, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.2, 'logisticregression__l1_ratio': 0.7, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.3, 'logisticregression__l1_ratio': 0.1, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.3, 'logisticregression__l1_ratio': 0.2, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.3, 'logisticregression__l1_ratio': 0.3, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.3, 'logisticregression__l1_ratio': 0.4, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.3, 'logisticregression__l1_ratio': 0.5, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.3, 'logisticregression__l1_ratio': 0.6, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.3, 'logisticregression__l1_ratio': 0.7, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.4, 'logisticregression__l1_ratio': 0.1, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.4, 'logisticregression__l1_ratio': 0.2, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.4, 'logisticregression__l1_ratio': 0.3, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.4, 'logisticregression__l1_ratio': 0.4, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.4, 'logisticregression__l1_ratio': 0.5, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.4, 'logisticregression__l1_ratio': 0.6, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.4, 'logisticregression__l1_ratio': 0.7, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.5, 'logisticregression__l1_ratio': 0.1, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.5, 'logisticregression__l1_ratio': 0.2, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.5, 'logisticregression__l1_ratio': 0.3, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.5, 'logisticregression__l1_ratio': 0.4, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.5, 'logisticregression__l1_ratio': 0.5, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.5, 'logisticregression__l1_ratio': 0.6, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.5, 'logisticregression__l1_ratio': 0.7, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.6, 'logisticregression__l1_ratio': 0.1, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.6, 'logisticregression__l1_ratio': 0.2, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.6, 'logisticregression__l1_ratio': 0.3, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.6, 'logisticregression__l1_ratio': 0.4, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.6, 'logisticregression__l1_ratio': 0.5, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.6, 'logisticregression__l1_ratio': 0.6, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.6, 'logisticregression__l1_ratio': 0.7, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.9, 'logisticregression__l1_ratio': 0.1, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.9, 'logisticregression__l1_ratio': 0.2, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.9, 'logisticregression__l1_ratio': 0.3, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.9, 'logisticregression__l1_ratio': 0.4, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.9, 'logisticregression__l1_ratio': 0.5, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.9, 'logisticregression__l1_ratio': 0.6, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.9, 'logisticregression__l1_ratio': 0.7, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 1, 'logisticregression__l1_ratio': 0.1, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 1, 'logisticregression__l1_ratio': 0.2, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 1, 'logisticregression__l1_ratio': 0.3, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 1, 'logisticregression__l1_ratio': 0.4, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 1, 'logisticregression__l1_ratio': 0.5, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 1, 'logisticregression__l1_ratio': 0.6, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 1, 'logisticregression__l1_ratio': 0.7, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 1.2, 'logisticregression__l1_ratio': 0.1, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 1.2, 'logisticregression__l1_ratio': 0.2, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 1.2, 'logisticregression__l1_ratio': 0.3, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 1.2, 'logisticregression__l1_ratio': 0.4, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 1.2, 'logisticregression__l1_ratio': 0.5, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 1.2, 'logisticregression__l1_ratio': 0.6, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 1.2, 'logisticregression__l1_ratio': 0.7, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 1.5, 'logisticregression__l1_ratio': 0.1, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 1.5, 'logisticregression__l1_ratio': 0.2, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 1.5, 'logisticregression__l1_ratio': 0.3, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 1.5, 'logisticregression__l1_ratio': 0.4, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 1.5, 'logisticregression__l1_ratio': 0.5, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 1.5, 'logisticregression__l1_ratio': 0.6, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 1.5, 'logisticregression__l1_ratio': 0.7, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 1.7, 'logisticregression__l1_ratio': 0.1, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 1.7, 'logisticregression__l1_ratio': 0.2, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 1.7, 'logisticregression__l1_ratio': 0.3, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 1.7, 'logisticregression__l1_ratio': 0.4, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 1.7, 'logisticregression__l1_ratio': 0.5, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 1.7, 'logisticregression__l1_ratio': 0.6, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 1.7, 'logisticregression__l1_ratio': 0.7, 'logisticregression__solver': 'saga'}, {'logisticregression__C': 0.2, 'logisticregression__penalty': 'l2', 'logisticregression__solver': 'sag'}, {'logisticregression__C': 0.2, 'logisticregression__penalty': 'l2', 'logisticregression__solver': 'newton-cg'}, {'logisticregression__C': 0.2, 'logisticregression__penalty': 'l2', 'logisticregression__solver': 'lbfgs'}, {'logisticregression__C': 0.3, 'logisticregression__penalty': 'l2', 'logisticregression__solver': 'sag'}, {'logisticregression__C': 0.3, 'logisticregression__penalty': 'l2', 'logisticregression__solver': 'newton-cg'}, {'logisticregression__C': 0.3, 'logisticregression__penalty': 'l2', 'logisticregression__solver': 'lbfgs'}, {'logisticregression__C': 0.4, 'logisticregression__penalty': 'l2', 'logisticregression__solver': 'sag'}, {'logisticregression__C': 0.4, 'logisticregression__penalty': 'l2', 'logisticregression__solver': 'newton-cg'}, {'logisticregression__C': 0.4, 'logisticregression__penalty': 'l2', 'logisticregression__solver': 'lbfgs'}, {'logisticregression__C': 0.5, 'logisticregression__penalty': 'l2', 'logisticregression__solver': 'sag'}, {'logisticregression__C': 0.5, 'logisticregression__penalty': 'l2', 'logisticregression__solver': 'newton-cg'}, {'logisticregression__C': 0.5, 'logisticregression__penalty': 'l2', 'logisticregression__solver': 'lbfgs'}, {'logisticregression__C': 0.6, 'logisticregression__penalty': 'l2', 'logisticregression__solver': 'sag'}, {'logisticregression__C': 0.6, 'logisticregression__penalty': 'l2', 'logisticregression__solver': 'newton-cg'}, {'logisticregression__C': 0.6, 'logisticregression__penalty': 'l2', 'logisticregression__solver': 'lbfgs'}, {'logisticregression__C': 0.9, 'logisticregression__penalty': 'l2', 'logisticregression__solver': 'sag'}, {'logisticregression__C': 0.9, 'logisticregression__penalty': 'l2', 'logisticregression__solver': 'newton-cg'}, {'logisticregression__C': 0.9, 'logisticregression__penalty': 'l2', 'logisticregression__solver': 'lbfgs'}, {'logisticregression__C': 1, 'logisticregression__penalty': 'l2', 'logisticregression__solver': 'sag'}, {'logisticregression__C': 1, 'logisticregression__penalty': 'l2', 'logisticregression__solver': 'newton-cg'}, {'logisticregression__C': 1, 'logisticregression__penalty': 'l2', 'logisticregression__solver': 'lbfgs'}, {'logisticregression__C': 1.2, 'logisticregression__penalty': 'l2', 'logisticregression__solver': 'sag'}, {'logisticregression__C': 1.2, 'logisticregression__penalty': 'l2', 'logisticregression__solver': 'newton-cg'}, {'logisticregression__C': 1.2, 'logisticregression__penalty': 'l2', 'logisticregression__solver': 'lbfgs'}, {'logisticregression__C': 1.5, 'logisticregression__penalty': 'l2', 'logisticregression__solver': 'sag'}, {'logisticregression__C': 1.5, 'logisticregression__penalty': 'l2', 'logisticregression__solver': 'newton-cg'}, {'logisticregression__C': 1.5, 'logisticregression__penalty': 'l2', 'logisticregression__solver': 'lbfgs'}, {'logisticregression__C': 1.7, 'logisticregression__penalty': 'l2', 'logisticregression__solver': 'sag'}, {'logisticregression__C': 1.7, 'logisticregression__penalty': 'l2', 'logisticregression__solver': 'newton-cg'}, {'logisticregression__C': 1.7, 'logisticregression__penalty': 'l2', 'logisticregression__solver': 'lbfgs'}], 'split0_test_score': array([0.72512648, 0.72512648, 0.72512648, 0.72681282, 0.72681282,\n",
      "       0.72849916, 0.72849916, 0.72681282, 0.72681282, 0.72681282,\n",
      "       0.72681282, 0.72849916, 0.72849916, 0.72849916, 0.72681282,\n",
      "       0.72681282, 0.72681282, 0.72849916, 0.72849916, 0.7301855 ,\n",
      "       0.7301855 , 0.72681282, 0.72681282, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.7301855 , 0.72681282, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72512648, 0.72512648, 0.72512648, 0.72681282, 0.72681282,\n",
      "       0.72681282, 0.72681282, 0.72681282, 0.72681282, 0.72681282,\n",
      "       0.72681282, 0.72681282, 0.72681282, 0.72681282, 0.72681282,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916]), 'split1_test_score': array([0.67790894, 0.67790894, 0.67790894, 0.67790894, 0.67790894,\n",
      "       0.67790894, 0.67790894, 0.67959528, 0.67959528, 0.67959528,\n",
      "       0.67790894, 0.67790894, 0.67790894, 0.67790894, 0.67959528,\n",
      "       0.67959528, 0.67959528, 0.67959528, 0.67959528, 0.67959528,\n",
      "       0.67959528, 0.67959528, 0.67959528, 0.67959528, 0.67959528,\n",
      "       0.67959528, 0.67959528, 0.67959528, 0.67959528, 0.67959528,\n",
      "       0.67959528, 0.67959528, 0.67959528, 0.67959528, 0.67959528,\n",
      "       0.67959528, 0.67959528, 0.67959528, 0.67959528, 0.67959528,\n",
      "       0.67959528, 0.67959528, 0.67959528, 0.67959528, 0.67959528,\n",
      "       0.67959528, 0.67959528, 0.67959528, 0.67959528, 0.67959528,\n",
      "       0.67959528, 0.67959528, 0.67959528, 0.67959528, 0.67959528,\n",
      "       0.67959528, 0.67959528, 0.67959528, 0.67959528, 0.67959528,\n",
      "       0.67959528, 0.67959528, 0.67959528, 0.67959528, 0.67959528,\n",
      "       0.67959528, 0.67959528, 0.67959528, 0.67959528, 0.67959528,\n",
      "       0.67790894, 0.67790894, 0.67790894, 0.67959528, 0.67959528,\n",
      "       0.67959528, 0.67959528, 0.67959528, 0.67959528, 0.67959528,\n",
      "       0.67959528, 0.67959528, 0.67959528, 0.67959528, 0.67959528,\n",
      "       0.67959528, 0.67959528, 0.67959528, 0.67959528, 0.67959528,\n",
      "       0.67959528, 0.67959528, 0.67959528, 0.67959528, 0.67959528,\n",
      "       0.67959528, 0.67959528, 0.67959528, 0.67959528, 0.67959528]), 'split2_test_score': array([0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 ,\n",
      "       0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 ,\n",
      "       0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 ,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 ,\n",
      "       0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 , 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916]), 'split3_test_score': array([0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172,\n",
      "       0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172,\n",
      "       0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172,\n",
      "       0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172,\n",
      "       0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172,\n",
      "       0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172,\n",
      "       0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172,\n",
      "       0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172,\n",
      "       0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172,\n",
      "       0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172,\n",
      "       0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172,\n",
      "       0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172,\n",
      "       0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172,\n",
      "       0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172,\n",
      "       0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172,\n",
      "       0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172, 0.7386172,\n",
      "       0.7386172, 0.7386172, 0.7386172, 0.7386172]), 'split4_test_score': array([0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793]), 'split5_test_score': array([0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71163575, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209]), 'split6_test_score': array([0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72006745, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72175379, 0.72175379,\n",
      "       0.71838111, 0.72006745, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111]), 'split7_test_score': array([0.71790541, 0.71790541, 0.71790541, 0.71959459, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71959459,\n",
      "       0.71959459, 0.71790541, 0.71790541, 0.71790541, 0.71959459,\n",
      "       0.71959459, 0.71959459, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71959459, 0.71959459, 0.71959459, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71959459, 0.71959459,\n",
      "       0.71959459, 0.71790541, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71959459, 0.71790541, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71959459, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71959459,\n",
      "       0.71959459, 0.71959459, 0.71959459, 0.71959459, 0.71959459,\n",
      "       0.71959459, 0.71959459, 0.71959459, 0.71959459, 0.71959459,\n",
      "       0.71959459, 0.71959459, 0.71959459, 0.71959459, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71790541]), 'split8_test_score': array([0.75844595, 0.75844595, 0.75844595, 0.75844595, 0.75844595,\n",
      "       0.75844595, 0.76013514, 0.75844595, 0.76013514, 0.76013514,\n",
      "       0.76013514, 0.76013514, 0.76013514, 0.76013514, 0.76013514,\n",
      "       0.76013514, 0.76013514, 0.76013514, 0.76013514, 0.76013514,\n",
      "       0.76013514, 0.76013514, 0.76013514, 0.76013514, 0.76013514,\n",
      "       0.76013514, 0.76013514, 0.76013514, 0.76013514, 0.76013514,\n",
      "       0.76013514, 0.76013514, 0.76013514, 0.76013514, 0.76013514,\n",
      "       0.76013514, 0.76013514, 0.76013514, 0.76013514, 0.76013514,\n",
      "       0.76013514, 0.76013514, 0.76013514, 0.76013514, 0.76013514,\n",
      "       0.76013514, 0.76013514, 0.76013514, 0.76013514, 0.76013514,\n",
      "       0.76013514, 0.76013514, 0.76013514, 0.76013514, 0.76013514,\n",
      "       0.76013514, 0.76013514, 0.76013514, 0.76013514, 0.76013514,\n",
      "       0.76013514, 0.76013514, 0.76013514, 0.76013514, 0.76013514,\n",
      "       0.76013514, 0.76013514, 0.76013514, 0.76013514, 0.76013514,\n",
      "       0.75844595, 0.75844595, 0.75844595, 0.75844595, 0.75844595,\n",
      "       0.75844595, 0.76013514, 0.76013514, 0.76013514, 0.76013514,\n",
      "       0.76013514, 0.76013514, 0.76013514, 0.76013514, 0.76013514,\n",
      "       0.76013514, 0.76013514, 0.76013514, 0.76013514, 0.76013514,\n",
      "       0.76013514, 0.76013514, 0.76013514, 0.76013514, 0.76013514,\n",
      "       0.76013514, 0.76013514, 0.76013514, 0.76013514, 0.76013514]), 'split9_test_score': array([0.72466216, 0.72466216, 0.72466216, 0.72466216, 0.72297297,\n",
      "       0.72297297, 0.72297297, 0.72635135, 0.72635135, 0.72635135,\n",
      "       0.72466216, 0.72466216, 0.72466216, 0.72466216, 0.72635135,\n",
      "       0.72635135, 0.72635135, 0.72635135, 0.72635135, 0.72635135,\n",
      "       0.72635135, 0.72635135, 0.72635135, 0.72635135, 0.72635135,\n",
      "       0.72635135, 0.72635135, 0.72635135, 0.72635135, 0.72635135,\n",
      "       0.72635135, 0.72635135, 0.72635135, 0.72635135, 0.72635135,\n",
      "       0.72635135, 0.72635135, 0.72635135, 0.72635135, 0.72635135,\n",
      "       0.72635135, 0.72635135, 0.72635135, 0.72635135, 0.72635135,\n",
      "       0.72635135, 0.72635135, 0.72635135, 0.72635135, 0.72635135,\n",
      "       0.72635135, 0.72635135, 0.72635135, 0.72635135, 0.72635135,\n",
      "       0.72635135, 0.72635135, 0.72635135, 0.72635135, 0.72635135,\n",
      "       0.72635135, 0.72635135, 0.72635135, 0.72635135, 0.72635135,\n",
      "       0.72635135, 0.72635135, 0.72635135, 0.72635135, 0.72635135,\n",
      "       0.72466216, 0.72466216, 0.72466216, 0.72635135, 0.72635135,\n",
      "       0.72635135, 0.72635135, 0.72635135, 0.72635135, 0.72635135,\n",
      "       0.72635135, 0.72635135, 0.72635135, 0.72635135, 0.72635135,\n",
      "       0.72635135, 0.72635135, 0.72635135, 0.72635135, 0.72635135,\n",
      "       0.72635135, 0.72635135, 0.72635135, 0.72635135, 0.72635135,\n",
      "       0.72635135, 0.72635135, 0.72635135, 0.72635135, 0.72635135]), 'split10_test_score': array([0.693086, 0.693086, 0.693086, 0.693086, 0.693086, 0.693086,\n",
      "       0.693086, 0.693086, 0.693086, 0.693086, 0.693086, 0.693086,\n",
      "       0.693086, 0.693086, 0.693086, 0.693086, 0.693086, 0.693086,\n",
      "       0.693086, 0.693086, 0.693086, 0.693086, 0.693086, 0.693086,\n",
      "       0.693086, 0.693086, 0.693086, 0.693086, 0.693086, 0.693086,\n",
      "       0.693086, 0.693086, 0.693086, 0.693086, 0.693086, 0.693086,\n",
      "       0.693086, 0.693086, 0.693086, 0.693086, 0.693086, 0.693086,\n",
      "       0.693086, 0.693086, 0.693086, 0.693086, 0.693086, 0.693086,\n",
      "       0.693086, 0.693086, 0.693086, 0.693086, 0.693086, 0.693086,\n",
      "       0.693086, 0.693086, 0.693086, 0.693086, 0.693086, 0.693086,\n",
      "       0.693086, 0.693086, 0.693086, 0.693086, 0.693086, 0.693086,\n",
      "       0.693086, 0.693086, 0.693086, 0.693086, 0.693086, 0.693086,\n",
      "       0.693086, 0.693086, 0.693086, 0.693086, 0.693086, 0.693086,\n",
      "       0.693086, 0.693086, 0.693086, 0.693086, 0.693086, 0.693086,\n",
      "       0.693086, 0.693086, 0.693086, 0.693086, 0.693086, 0.693086,\n",
      "       0.693086, 0.693086, 0.693086, 0.693086, 0.693086, 0.693086,\n",
      "       0.693086, 0.693086, 0.693086, 0.693086]), 'split11_test_score': array([0.74536256, 0.74536256, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.74367622, 0.74367622, 0.74367622, 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74367622, 0.74536256, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.74536256, 0.74536256]), 'split12_test_score': array([0.72344013, 0.72344013, 0.72344013, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013]), 'split13_test_score': array([0.77403035, 0.77403035, 0.77403035, 0.77403035, 0.77403035,\n",
      "       0.77403035, 0.77403035, 0.77403035, 0.77403035, 0.77403035,\n",
      "       0.77403035, 0.77403035, 0.77403035, 0.77403035, 0.77403035,\n",
      "       0.77403035, 0.77403035, 0.77403035, 0.77403035, 0.77403035,\n",
      "       0.77403035, 0.77403035, 0.77403035, 0.77403035, 0.77403035,\n",
      "       0.77403035, 0.77403035, 0.77403035, 0.77403035, 0.77403035,\n",
      "       0.77403035, 0.77403035, 0.77403035, 0.77403035, 0.77403035,\n",
      "       0.77403035, 0.77403035, 0.77403035, 0.77403035, 0.77403035,\n",
      "       0.77403035, 0.77403035, 0.77403035, 0.77403035, 0.77403035,\n",
      "       0.77403035, 0.77403035, 0.77403035, 0.77403035, 0.77403035,\n",
      "       0.77403035, 0.77403035, 0.77403035, 0.77403035, 0.77403035,\n",
      "       0.77403035, 0.77403035, 0.77403035, 0.77403035, 0.77403035,\n",
      "       0.77403035, 0.77403035, 0.77403035, 0.77571669, 0.77571669,\n",
      "       0.77571669, 0.77571669, 0.77571669, 0.77403035, 0.77403035,\n",
      "       0.77403035, 0.77403035, 0.77403035, 0.77403035, 0.77403035,\n",
      "       0.77403035, 0.77403035, 0.77403035, 0.77403035, 0.77403035,\n",
      "       0.77403035, 0.77403035, 0.77403035, 0.77403035, 0.77403035,\n",
      "       0.77403035, 0.77403035, 0.77403035, 0.77403035, 0.77403035,\n",
      "       0.77403035, 0.77403035, 0.77403035, 0.77403035, 0.77403035,\n",
      "       0.77403035, 0.77403035, 0.77571669, 0.77571669, 0.77571669]), 'split14_test_score': array([0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71500843,\n",
      "       0.71669477, 0.71500843, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71500843, 0.71500843, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71500843, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209]), 'split15_test_score': array([0.70994941, 0.70994941, 0.70826307, 0.70826307, 0.70826307,\n",
      "       0.70826307, 0.70826307, 0.70994941, 0.70826307, 0.70826307,\n",
      "       0.70826307, 0.70826307, 0.70826307, 0.70826307, 0.70826307,\n",
      "       0.70826307, 0.70826307, 0.70826307, 0.70826307, 0.70826307,\n",
      "       0.70826307, 0.70657673, 0.70657673, 0.70657673, 0.70826307,\n",
      "       0.70826307, 0.70826307, 0.70826307, 0.70657673, 0.70657673,\n",
      "       0.70657673, 0.70657673, 0.70826307, 0.70826307, 0.70826307,\n",
      "       0.70657673, 0.70657673, 0.70657673, 0.70657673, 0.70657673,\n",
      "       0.70657673, 0.70657673, 0.70657673, 0.70657673, 0.70657673,\n",
      "       0.70657673, 0.70657673, 0.70657673, 0.70657673, 0.70657673,\n",
      "       0.70657673, 0.70657673, 0.70657673, 0.70657673, 0.70657673,\n",
      "       0.70657673, 0.70826307, 0.70657673, 0.70657673, 0.70657673,\n",
      "       0.70657673, 0.70657673, 0.70657673, 0.70657673, 0.70657673,\n",
      "       0.70657673, 0.70657673, 0.70657673, 0.70657673, 0.70657673,\n",
      "       0.70994941, 0.70994941, 0.70994941, 0.70826307, 0.70826307,\n",
      "       0.70826307, 0.70826307, 0.70826307, 0.70826307, 0.70826307,\n",
      "       0.70826307, 0.70826307, 0.70826307, 0.70826307, 0.70994941,\n",
      "       0.70657673, 0.70657673, 0.70826307, 0.70657673, 0.70657673,\n",
      "       0.70826307, 0.70657673, 0.70657673, 0.70826307, 0.70826307,\n",
      "       0.70826307, 0.70826307, 0.70826307, 0.70826307, 0.70826307]), 'split16_test_score': array([0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209]), 'split17_test_score': array([0.73817568, 0.73817568, 0.73817568, 0.73817568, 0.73817568,\n",
      "       0.73817568, 0.73817568, 0.73817568, 0.73817568, 0.73817568,\n",
      "       0.73817568, 0.73817568, 0.73817568, 0.73817568, 0.73817568,\n",
      "       0.73817568, 0.73817568, 0.73817568, 0.73817568, 0.73817568,\n",
      "       0.73817568, 0.73817568, 0.73817568, 0.73817568, 0.73817568,\n",
      "       0.73817568, 0.73817568, 0.73817568, 0.73817568, 0.73817568,\n",
      "       0.73817568, 0.73817568, 0.73817568, 0.73817568, 0.73817568,\n",
      "       0.73817568, 0.73817568, 0.73817568, 0.73817568, 0.73817568,\n",
      "       0.73817568, 0.73817568, 0.73817568, 0.73817568, 0.73817568,\n",
      "       0.73817568, 0.73817568, 0.73817568, 0.73817568, 0.73817568,\n",
      "       0.73817568, 0.73817568, 0.73817568, 0.73817568, 0.73817568,\n",
      "       0.73817568, 0.73817568, 0.73817568, 0.73817568, 0.73817568,\n",
      "       0.73817568, 0.73817568, 0.73817568, 0.73817568, 0.73817568,\n",
      "       0.73817568, 0.73817568, 0.73817568, 0.73817568, 0.73817568,\n",
      "       0.73817568, 0.73817568, 0.73817568, 0.73817568, 0.73817568,\n",
      "       0.73817568, 0.73817568, 0.73817568, 0.73817568, 0.73817568,\n",
      "       0.73817568, 0.73817568, 0.73817568, 0.73817568, 0.73817568,\n",
      "       0.73817568, 0.73817568, 0.73817568, 0.73817568, 0.73817568,\n",
      "       0.73817568, 0.73817568, 0.73817568, 0.73817568, 0.73817568,\n",
      "       0.73817568, 0.73817568, 0.73817568, 0.73817568, 0.73817568]), 'split18_test_score': array([0.71283784, 0.71283784, 0.71283784, 0.71283784, 0.71283784,\n",
      "       0.71283784, 0.71283784, 0.71283784, 0.71283784, 0.71283784,\n",
      "       0.71283784, 0.71283784, 0.71283784, 0.71283784, 0.71283784,\n",
      "       0.71283784, 0.71283784, 0.71283784, 0.71283784, 0.71283784,\n",
      "       0.71283784, 0.71283784, 0.71283784, 0.71283784, 0.71283784,\n",
      "       0.71283784, 0.71283784, 0.71283784, 0.71452703, 0.71452703,\n",
      "       0.71283784, 0.71283784, 0.71283784, 0.71283784, 0.71283784,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71283784, 0.71283784, 0.71283784, 0.71283784, 0.71283784,\n",
      "       0.71283784, 0.71283784, 0.71283784, 0.71283784, 0.71283784,\n",
      "       0.71283784, 0.71283784, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703]), 'split19_test_score': array([0.72635135, 0.72635135, 0.72635135, 0.72635135, 0.72635135,\n",
      "       0.72635135, 0.72635135, 0.72466216, 0.72635135, 0.72635135,\n",
      "       0.72635135, 0.72635135, 0.72635135, 0.72635135, 0.72466216,\n",
      "       0.72635135, 0.72635135, 0.72635135, 0.72635135, 0.72635135,\n",
      "       0.72635135, 0.72466216, 0.72635135, 0.72635135, 0.72635135,\n",
      "       0.72635135, 0.72635135, 0.72635135, 0.72466216, 0.72635135,\n",
      "       0.72635135, 0.72635135, 0.72635135, 0.72635135, 0.72635135,\n",
      "       0.72466216, 0.72466216, 0.72635135, 0.72635135, 0.72635135,\n",
      "       0.72466216, 0.72466216, 0.72466216, 0.72466216, 0.72635135,\n",
      "       0.72635135, 0.72635135, 0.72466216, 0.72466216, 0.72466216,\n",
      "       0.72466216, 0.72466216, 0.72635135, 0.72466216, 0.72466216,\n",
      "       0.72466216, 0.72466216, 0.72466216, 0.72297297, 0.72297297,\n",
      "       0.72466216, 0.72466216, 0.72466216, 0.72466216, 0.72466216,\n",
      "       0.72297297, 0.72297297, 0.72466216, 0.72635135, 0.72466216,\n",
      "       0.72466216, 0.72466216, 0.72466216, 0.72466216, 0.72466216,\n",
      "       0.72466216, 0.72466216, 0.72466216, 0.72466216, 0.72466216,\n",
      "       0.72466216, 0.72466216, 0.72466216, 0.72466216, 0.72466216,\n",
      "       0.72466216, 0.72466216, 0.72466216, 0.72466216, 0.72466216,\n",
      "       0.72466216, 0.72466216, 0.72466216, 0.72466216, 0.72466216,\n",
      "       0.72466216, 0.72466216, 0.72466216, 0.72466216, 0.72466216]), 'split20_test_score': array([0.69645868, 0.69645868, 0.69645868, 0.69477234, 0.69477234,\n",
      "       0.69477234, 0.69477234, 0.69645868, 0.69645868, 0.69645868,\n",
      "       0.69477234, 0.69477234, 0.69477234, 0.69477234, 0.69645868,\n",
      "       0.69645868, 0.69645868, 0.69645868, 0.69477234, 0.69477234,\n",
      "       0.69477234, 0.69645868, 0.69645868, 0.69645868, 0.69645868,\n",
      "       0.69477234, 0.69477234, 0.69477234, 0.69645868, 0.69645868,\n",
      "       0.69645868, 0.69645868, 0.69645868, 0.69477234, 0.69477234,\n",
      "       0.69645868, 0.69645868, 0.69645868, 0.69645868, 0.69645868,\n",
      "       0.69645868, 0.69645868, 0.69645868, 0.69645868, 0.69645868,\n",
      "       0.69645868, 0.69645868, 0.69645868, 0.69645868, 0.69645868,\n",
      "       0.69645868, 0.69645868, 0.69645868, 0.69645868, 0.69645868,\n",
      "       0.69645868, 0.69645868, 0.69645868, 0.69645868, 0.69645868,\n",
      "       0.69645868, 0.69645868, 0.69645868, 0.69645868, 0.69645868,\n",
      "       0.69645868, 0.69645868, 0.69645868, 0.69645868, 0.69645868,\n",
      "       0.69645868, 0.69645868, 0.69645868, 0.69645868, 0.69645868,\n",
      "       0.69645868, 0.69645868, 0.69645868, 0.69645868, 0.69645868,\n",
      "       0.69645868, 0.69645868, 0.69645868, 0.69645868, 0.69645868,\n",
      "       0.69645868, 0.69645868, 0.69645868, 0.69645868, 0.69645868,\n",
      "       0.69645868, 0.69645868, 0.69645868, 0.69645868, 0.69645868,\n",
      "       0.69645868, 0.69645868, 0.69645868, 0.69645868, 0.69645868]), 'split21_test_score': array([0.75042159, 0.75042159, 0.75042159, 0.75042159, 0.74873524,\n",
      "       0.7470489 , 0.7470489 , 0.75042159, 0.74873524, 0.74873524,\n",
      "       0.74873524, 0.74873524, 0.74873524, 0.74873524, 0.74873524,\n",
      "       0.74873524, 0.74873524, 0.74873524, 0.74873524, 0.74873524,\n",
      "       0.74873524, 0.74873524, 0.74873524, 0.74873524, 0.74873524,\n",
      "       0.74873524, 0.74873524, 0.74873524, 0.74873524, 0.74873524,\n",
      "       0.74873524, 0.74873524, 0.74873524, 0.74873524, 0.74873524,\n",
      "       0.74873524, 0.74873524, 0.74873524, 0.74873524, 0.74873524,\n",
      "       0.74873524, 0.74873524, 0.74873524, 0.74873524, 0.74873524,\n",
      "       0.74873524, 0.74873524, 0.74873524, 0.74873524, 0.74873524,\n",
      "       0.74873524, 0.74873524, 0.74873524, 0.74873524, 0.74873524,\n",
      "       0.74873524, 0.74873524, 0.74873524, 0.74873524, 0.74873524,\n",
      "       0.74873524, 0.74873524, 0.74873524, 0.74873524, 0.74873524,\n",
      "       0.74873524, 0.74873524, 0.74873524, 0.74873524, 0.74873524,\n",
      "       0.75042159, 0.75042159, 0.75042159, 0.75042159, 0.75042159,\n",
      "       0.75042159, 0.74873524, 0.74873524, 0.74873524, 0.74873524,\n",
      "       0.74873524, 0.74873524, 0.74873524, 0.74873524, 0.74873524,\n",
      "       0.74873524, 0.74873524, 0.74873524, 0.74873524, 0.74873524,\n",
      "       0.7470489 , 0.7470489 , 0.74873524, 0.7470489 , 0.7470489 ,\n",
      "       0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 ]), 'split22_test_score': array([0.74198988, 0.74198988, 0.74198988, 0.74198988, 0.74198988,\n",
      "       0.74198988, 0.74198988, 0.74198988, 0.74198988, 0.74198988,\n",
      "       0.74198988, 0.74198988, 0.74198988, 0.74198988, 0.74198988,\n",
      "       0.74198988, 0.74198988, 0.74198988, 0.74198988, 0.74198988,\n",
      "       0.74198988, 0.74198988, 0.74198988, 0.74198988, 0.74198988,\n",
      "       0.74198988, 0.74198988, 0.74198988, 0.74198988, 0.74198988,\n",
      "       0.74198988, 0.74198988, 0.74198988, 0.74198988, 0.74198988,\n",
      "       0.74198988, 0.74198988, 0.74198988, 0.74198988, 0.74198988,\n",
      "       0.74198988, 0.74198988, 0.74198988, 0.74198988, 0.74198988,\n",
      "       0.74198988, 0.74198988, 0.74198988, 0.74198988, 0.74198988,\n",
      "       0.74198988, 0.74198988, 0.74198988, 0.74198988, 0.74198988,\n",
      "       0.74198988, 0.74198988, 0.74198988, 0.74198988, 0.74198988,\n",
      "       0.74198988, 0.74198988, 0.74198988, 0.74198988, 0.74198988,\n",
      "       0.74198988, 0.74198988, 0.74198988, 0.74198988, 0.74198988,\n",
      "       0.74198988, 0.74198988, 0.74198988, 0.74198988, 0.74198988,\n",
      "       0.74198988, 0.74198988, 0.74198988, 0.74198988, 0.74198988,\n",
      "       0.74198988, 0.74198988, 0.74198988, 0.74198988, 0.74198988,\n",
      "       0.74198988, 0.74198988, 0.74198988, 0.74198988, 0.74198988,\n",
      "       0.74198988, 0.74198988, 0.74198988, 0.74198988, 0.74198988,\n",
      "       0.74198988, 0.74198988, 0.74198988, 0.74198988, 0.74198988]), 'split23_test_score': array([0.74536256, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.74367622, 0.74367622, 0.74367622, 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.7470489 , 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74367622, 0.74536256, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.74367622, 0.74367622, 0.74536256,\n",
      "       0.74536256, 0.74367622, 0.74536256, 0.74536256, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74536256, 0.74536256,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 ,\n",
      "       0.7470489 , 0.7470489 , 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622]), 'split24_test_score': array([0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745]), 'split25_test_score': array([0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.74030354, 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.74030354, 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.74030354, 0.74030354,\n",
      "       0.74030354, 0.74030354, 0.74030354, 0.74030354, 0.74030354,\n",
      "       0.74030354, 0.74030354, 0.74030354, 0.74030354, 0.74030354]), 'split26_test_score': array([0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71163575,\n",
      "       0.71163575, 0.71163575, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71163575, 0.71163575, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71163575, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209]), 'split27_test_score': array([0.71283784, 0.71283784, 0.71283784, 0.71283784, 0.71283784,\n",
      "       0.71452703, 0.71621622, 0.71283784, 0.71283784, 0.71283784,\n",
      "       0.71283784, 0.71283784, 0.71283784, 0.71452703, 0.71452703,\n",
      "       0.71283784, 0.71283784, 0.71283784, 0.71283784, 0.71283784,\n",
      "       0.71283784, 0.71452703, 0.71452703, 0.71283784, 0.71283784,\n",
      "       0.71283784, 0.71283784, 0.71283784, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71283784, 0.71283784, 0.71283784, 0.71283784,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71283784, 0.71283784, 0.71283784, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703]), 'split28_test_score': array([0.71959459, 0.71959459, 0.71959459, 0.71959459, 0.71959459,\n",
      "       0.72128378, 0.72128378, 0.71959459, 0.71959459, 0.71959459,\n",
      "       0.71959459, 0.71959459, 0.71959459, 0.71959459, 0.71959459,\n",
      "       0.71959459, 0.71959459, 0.71959459, 0.71959459, 0.71959459,\n",
      "       0.71959459, 0.71959459, 0.71959459, 0.71959459, 0.71959459,\n",
      "       0.71959459, 0.71959459, 0.71959459, 0.71959459, 0.71959459,\n",
      "       0.71959459, 0.71959459, 0.71959459, 0.71959459, 0.71959459,\n",
      "       0.71959459, 0.71959459, 0.71959459, 0.71959459, 0.71959459,\n",
      "       0.71959459, 0.71959459, 0.71959459, 0.71959459, 0.71959459,\n",
      "       0.71959459, 0.71959459, 0.71959459, 0.71959459, 0.71959459,\n",
      "       0.71959459, 0.71959459, 0.71959459, 0.71959459, 0.71959459,\n",
      "       0.71959459, 0.71959459, 0.71959459, 0.71959459, 0.71959459,\n",
      "       0.71959459, 0.71959459, 0.71959459, 0.71959459, 0.71959459,\n",
      "       0.71959459, 0.71959459, 0.71959459, 0.71959459, 0.71959459,\n",
      "       0.71959459, 0.71959459, 0.71959459, 0.71959459, 0.71959459,\n",
      "       0.71959459, 0.71959459, 0.71959459, 0.71959459, 0.71959459,\n",
      "       0.71959459, 0.71959459, 0.71959459, 0.71959459, 0.71959459,\n",
      "       0.71959459, 0.71959459, 0.71959459, 0.71959459, 0.71959459,\n",
      "       0.71959459, 0.71959459, 0.71959459, 0.71959459, 0.71959459,\n",
      "       0.71959459, 0.71959459, 0.71959459, 0.71959459, 0.71959459]), 'split29_test_score': array([0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71790541, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622]), 'split30_test_score': array([0.69645868, 0.69645868, 0.69645868, 0.69645868, 0.69645868,\n",
      "       0.69645868, 0.69645868, 0.69645868, 0.69645868, 0.69645868,\n",
      "       0.69645868, 0.69645868, 0.69645868, 0.69645868, 0.69814503,\n",
      "       0.69814503, 0.69645868, 0.69645868, 0.69645868, 0.69645868,\n",
      "       0.69645868, 0.69814503, 0.69814503, 0.69814503, 0.69814503,\n",
      "       0.69814503, 0.69645868, 0.69645868, 0.69814503, 0.69814503,\n",
      "       0.69814503, 0.69814503, 0.69814503, 0.69814503, 0.69814503,\n",
      "       0.69814503, 0.69814503, 0.69814503, 0.69814503, 0.69814503,\n",
      "       0.69814503, 0.69814503, 0.69814503, 0.69814503, 0.69814503,\n",
      "       0.69814503, 0.69814503, 0.69814503, 0.69814503, 0.69814503,\n",
      "       0.69814503, 0.69814503, 0.69814503, 0.69814503, 0.69814503,\n",
      "       0.69814503, 0.69814503, 0.69814503, 0.69814503, 0.69814503,\n",
      "       0.69814503, 0.69814503, 0.69814503, 0.69814503, 0.69814503,\n",
      "       0.69814503, 0.69814503, 0.69814503, 0.69814503, 0.69814503,\n",
      "       0.69645868, 0.69645868, 0.69645868, 0.69645868, 0.69814503,\n",
      "       0.69814503, 0.69814503, 0.69814503, 0.69814503, 0.69814503,\n",
      "       0.69814503, 0.69814503, 0.69814503, 0.69814503, 0.69814503,\n",
      "       0.69814503, 0.69814503, 0.69814503, 0.69814503, 0.69814503,\n",
      "       0.69814503, 0.69814503, 0.69814503, 0.69814503, 0.69814503,\n",
      "       0.69814503, 0.69645868, 0.69645868, 0.69814503, 0.69645868]), 'split31_test_score': array([0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 ,\n",
      "       0.7301855 , 0.7301855 , 0.73187184, 0.7301855 , 0.7301855 ,\n",
      "       0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 , 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.7301855 , 0.7301855 , 0.7301855 ,\n",
      "       0.7301855 , 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.7301855 , 0.7301855 , 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184]), 'split32_test_score': array([0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 ,\n",
      "       0.6762226 , 0.67790894, 0.6762226 , 0.6762226 , 0.6762226 ,\n",
      "       0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 ,\n",
      "       0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 ,\n",
      "       0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 ,\n",
      "       0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 ,\n",
      "       0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 ,\n",
      "       0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 ,\n",
      "       0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 ,\n",
      "       0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 ,\n",
      "       0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 ,\n",
      "       0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 ,\n",
      "       0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 ,\n",
      "       0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 ,\n",
      "       0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 ,\n",
      "       0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 ,\n",
      "       0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 ,\n",
      "       0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 ,\n",
      "       0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 ,\n",
      "       0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 , 0.6762226 ]), 'split33_test_score': array([0.70826307, 0.70826307, 0.70826307, 0.70826307, 0.70826307,\n",
      "       0.70826307, 0.70826307, 0.70826307, 0.70826307, 0.70826307,\n",
      "       0.70826307, 0.70826307, 0.70826307, 0.70826307, 0.70826307,\n",
      "       0.70826307, 0.70826307, 0.70826307, 0.70826307, 0.70826307,\n",
      "       0.70826307, 0.70826307, 0.70826307, 0.70826307, 0.70826307,\n",
      "       0.70826307, 0.70826307, 0.70826307, 0.70826307, 0.70826307,\n",
      "       0.70826307, 0.70826307, 0.70826307, 0.70826307, 0.70826307,\n",
      "       0.70826307, 0.70826307, 0.70826307, 0.70826307, 0.70826307,\n",
      "       0.70826307, 0.70826307, 0.70826307, 0.70826307, 0.70826307,\n",
      "       0.70826307, 0.70826307, 0.70826307, 0.70826307, 0.70826307,\n",
      "       0.70826307, 0.70826307, 0.70826307, 0.70826307, 0.70826307,\n",
      "       0.70826307, 0.70826307, 0.70826307, 0.70826307, 0.70826307,\n",
      "       0.70826307, 0.70826307, 0.70826307, 0.70826307, 0.70826307,\n",
      "       0.70826307, 0.70826307, 0.70826307, 0.70826307, 0.70826307,\n",
      "       0.70826307, 0.70826307, 0.70826307, 0.70826307, 0.70826307,\n",
      "       0.70826307, 0.70826307, 0.70826307, 0.70826307, 0.70826307,\n",
      "       0.70826307, 0.70826307, 0.70826307, 0.70826307, 0.70826307,\n",
      "       0.70826307, 0.70826307, 0.70826307, 0.70826307, 0.70826307,\n",
      "       0.70826307, 0.70826307, 0.70826307, 0.70826307, 0.70826307,\n",
      "       0.70826307, 0.70826307, 0.70826307, 0.70826307, 0.70826307]), 'split34_test_score': array([0.76053963, 0.76053963, 0.76053963, 0.76053963, 0.75885329,\n",
      "       0.75885329, 0.75885329, 0.75885329, 0.75885329, 0.76053963,\n",
      "       0.76053963, 0.76053963, 0.76053963, 0.76053963, 0.75885329,\n",
      "       0.75885329, 0.75885329, 0.76053963, 0.76053963, 0.76053963,\n",
      "       0.76053963, 0.75885329, 0.75885329, 0.75885329, 0.75885329,\n",
      "       0.76053963, 0.76053963, 0.76053963, 0.75885329, 0.75885329,\n",
      "       0.75885329, 0.75885329, 0.75885329, 0.76053963, 0.76053963,\n",
      "       0.75885329, 0.75885329, 0.75885329, 0.75885329, 0.75885329,\n",
      "       0.75885329, 0.75885329, 0.75885329, 0.75885329, 0.75885329,\n",
      "       0.75885329, 0.75885329, 0.75885329, 0.75885329, 0.75885329,\n",
      "       0.75885329, 0.75885329, 0.75885329, 0.75885329, 0.75885329,\n",
      "       0.75885329, 0.75885329, 0.75885329, 0.75885329, 0.75885329,\n",
      "       0.75885329, 0.75885329, 0.75885329, 0.75885329, 0.75885329,\n",
      "       0.75885329, 0.75885329, 0.75885329, 0.75885329, 0.75885329,\n",
      "       0.76053963, 0.76053963, 0.76053963, 0.75885329, 0.75885329,\n",
      "       0.75885329, 0.75885329, 0.75885329, 0.75885329, 0.75885329,\n",
      "       0.75885329, 0.75885329, 0.75885329, 0.75885329, 0.75885329,\n",
      "       0.75885329, 0.75885329, 0.75885329, 0.75885329, 0.75885329,\n",
      "       0.75885329, 0.75885329, 0.75885329, 0.75885329, 0.75885329,\n",
      "       0.75885329, 0.75885329, 0.75885329, 0.75885329, 0.75885329]), 'split35_test_score': array([0.72344013, 0.72344013, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72344013, 0.72344013, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72006745, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72344013, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72344013,\n",
      "       0.72344013, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72175379, 0.72175379, 0.72175379, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72175379, 0.72175379, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72175379,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013]), 'split36_test_score': array([0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916]), 'split37_test_score': array([0.74155405, 0.74155405, 0.74155405, 0.74155405, 0.74155405,\n",
      "       0.74155405, 0.74324324, 0.74155405, 0.74155405, 0.74155405,\n",
      "       0.74155405, 0.74155405, 0.74155405, 0.74155405, 0.74155405,\n",
      "       0.74155405, 0.74155405, 0.74155405, 0.74155405, 0.74155405,\n",
      "       0.74155405, 0.74155405, 0.74155405, 0.74155405, 0.74155405,\n",
      "       0.74155405, 0.74155405, 0.74155405, 0.74155405, 0.74155405,\n",
      "       0.74155405, 0.74155405, 0.74155405, 0.74155405, 0.74155405,\n",
      "       0.74155405, 0.74155405, 0.74155405, 0.74155405, 0.74155405,\n",
      "       0.74155405, 0.74155405, 0.74155405, 0.74155405, 0.74155405,\n",
      "       0.74155405, 0.74155405, 0.74155405, 0.74155405, 0.74155405,\n",
      "       0.74155405, 0.74155405, 0.74155405, 0.74155405, 0.74155405,\n",
      "       0.74155405, 0.74155405, 0.74155405, 0.74155405, 0.74155405,\n",
      "       0.74155405, 0.74155405, 0.74155405, 0.74155405, 0.74155405,\n",
      "       0.74155405, 0.74155405, 0.74155405, 0.74155405, 0.74155405,\n",
      "       0.74155405, 0.74155405, 0.74155405, 0.74155405, 0.74155405,\n",
      "       0.74155405, 0.74155405, 0.74155405, 0.74155405, 0.74155405,\n",
      "       0.74155405, 0.74155405, 0.74155405, 0.74155405, 0.74155405,\n",
      "       0.74155405, 0.74155405, 0.74155405, 0.74155405, 0.74155405,\n",
      "       0.74155405, 0.74155405, 0.74155405, 0.74155405, 0.74155405,\n",
      "       0.74155405, 0.74155405, 0.74155405, 0.74155405, 0.74155405]), 'split38_test_score': array([0.73648649, 0.73817568, 0.73648649, 0.73648649, 0.73648649,\n",
      "       0.73648649, 0.73648649, 0.7347973 , 0.73648649, 0.73817568,\n",
      "       0.73817568, 0.73817568, 0.73648649, 0.73648649, 0.7347973 ,\n",
      "       0.7347973 , 0.7347973 , 0.73648649, 0.73817568, 0.73817568,\n",
      "       0.73817568, 0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 ,\n",
      "       0.73648649, 0.73648649, 0.73648649, 0.7347973 , 0.7347973 ,\n",
      "       0.7347973 , 0.7347973 , 0.7347973 , 0.73648649, 0.73648649,\n",
      "       0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 ,\n",
      "       0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 ,\n",
      "       0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 ,\n",
      "       0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 ,\n",
      "       0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 ,\n",
      "       0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 ,\n",
      "       0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 ,\n",
      "       0.73648649, 0.73648649, 0.73648649, 0.7347973 , 0.7347973 ,\n",
      "       0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 ,\n",
      "       0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 ,\n",
      "       0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 ,\n",
      "       0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 ,\n",
      "       0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 ]), 'split39_test_score': array([0.75168919, 0.75168919, 0.75      , 0.74831081, 0.74831081,\n",
      "       0.74831081, 0.74831081, 0.75168919, 0.75168919, 0.75168919,\n",
      "       0.75168919, 0.75168919, 0.75168919, 0.75      , 0.75168919,\n",
      "       0.75168919, 0.75168919, 0.75168919, 0.75168919, 0.75168919,\n",
      "       0.75168919, 0.75168919, 0.75168919, 0.75168919, 0.75168919,\n",
      "       0.75168919, 0.75168919, 0.75168919, 0.75168919, 0.75168919,\n",
      "       0.75168919, 0.75168919, 0.75168919, 0.75168919, 0.75168919,\n",
      "       0.75168919, 0.75168919, 0.75168919, 0.75168919, 0.75168919,\n",
      "       0.75168919, 0.75168919, 0.75168919, 0.75168919, 0.75168919,\n",
      "       0.75168919, 0.75168919, 0.75168919, 0.75168919, 0.75168919,\n",
      "       0.75168919, 0.75168919, 0.75168919, 0.75168919, 0.75168919,\n",
      "       0.75168919, 0.75168919, 0.75168919, 0.75168919, 0.75168919,\n",
      "       0.75168919, 0.75168919, 0.75168919, 0.75168919, 0.75168919,\n",
      "       0.75168919, 0.75168919, 0.75168919, 0.75168919, 0.75168919,\n",
      "       0.75168919, 0.75168919, 0.75168919, 0.75168919, 0.75168919,\n",
      "       0.75168919, 0.75168919, 0.75168919, 0.75168919, 0.75168919,\n",
      "       0.75168919, 0.75168919, 0.75168919, 0.75168919, 0.75168919,\n",
      "       0.75168919, 0.75168919, 0.75168919, 0.75168919, 0.75168919,\n",
      "       0.75168919, 0.75168919, 0.75168919, 0.75168919, 0.75168919,\n",
      "       0.75168919, 0.75168919, 0.75168919, 0.75168919, 0.75168919]), 'split40_test_score': array([0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379]), 'split41_test_score': array([0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111]), 'split42_test_score': array([0.72849916, 0.72849916, 0.72849916, 0.72849916, 0.72849916,\n",
      "       0.7301855 , 0.73187184, 0.72849916, 0.7301855 , 0.7301855 ,\n",
      "       0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 ,\n",
      "       0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 ,\n",
      "       0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 ,\n",
      "       0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 ,\n",
      "       0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 ,\n",
      "       0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 ,\n",
      "       0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 ,\n",
      "       0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 ,\n",
      "       0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 ,\n",
      "       0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 ,\n",
      "       0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 ,\n",
      "       0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 ,\n",
      "       0.7301855 , 0.7301855 , 0.7301855 , 0.72849916, 0.72849916,\n",
      "       0.72849916, 0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 ,\n",
      "       0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 ,\n",
      "       0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 ,\n",
      "       0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 ,\n",
      "       0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 ]), 'split43_test_score': array([0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72175379, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72512648, 0.72512648, 0.72512648, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013]), 'split44_test_score': array([0.70320405, 0.70320405, 0.70320405, 0.70320405, 0.70320405,\n",
      "       0.70489039, 0.70489039, 0.70320405, 0.70320405, 0.70320405,\n",
      "       0.70320405, 0.70320405, 0.70320405, 0.70320405, 0.70320405,\n",
      "       0.70320405, 0.70320405, 0.70320405, 0.70320405, 0.70320405,\n",
      "       0.70320405, 0.70320405, 0.70320405, 0.70320405, 0.70320405,\n",
      "       0.70320405, 0.70320405, 0.70320405, 0.70320405, 0.70320405,\n",
      "       0.70320405, 0.70320405, 0.70320405, 0.70320405, 0.70320405,\n",
      "       0.70320405, 0.70320405, 0.70320405, 0.70320405, 0.70320405,\n",
      "       0.70320405, 0.70320405, 0.70320405, 0.70320405, 0.70320405,\n",
      "       0.70320405, 0.70320405, 0.70320405, 0.70320405, 0.70320405,\n",
      "       0.70320405, 0.70320405, 0.70320405, 0.70320405, 0.70320405,\n",
      "       0.70320405, 0.70320405, 0.70320405, 0.70320405, 0.70320405,\n",
      "       0.70320405, 0.70320405, 0.70320405, 0.70320405, 0.70320405,\n",
      "       0.70320405, 0.70320405, 0.70320405, 0.70320405, 0.70320405,\n",
      "       0.70320405, 0.70320405, 0.70320405, 0.70320405, 0.70320405,\n",
      "       0.70320405, 0.70320405, 0.70320405, 0.70320405, 0.70320405,\n",
      "       0.70320405, 0.70320405, 0.70320405, 0.70320405, 0.70320405,\n",
      "       0.70320405, 0.70320405, 0.70320405, 0.70320405, 0.70320405,\n",
      "       0.70320405, 0.70320405, 0.70320405, 0.70320405, 0.70320405,\n",
      "       0.70320405, 0.70320405, 0.70320405, 0.70320405, 0.70320405]), 'split45_test_score': array([0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745]), 'split46_test_score': array([0.7386172 , 0.74030354, 0.74030354, 0.74198988, 0.74198988,\n",
      "       0.74198988, 0.74030354, 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.74030354, 0.74030354, 0.74030354, 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ]), 'split47_test_score': array([0.73986486, 0.73986486, 0.73986486, 0.73986486, 0.73986486,\n",
      "       0.73986486, 0.73986486, 0.73986486, 0.73986486, 0.73986486,\n",
      "       0.73986486, 0.73986486, 0.73986486, 0.73986486, 0.73986486,\n",
      "       0.73986486, 0.73986486, 0.73986486, 0.73986486, 0.73986486,\n",
      "       0.73986486, 0.73986486, 0.73986486, 0.73986486, 0.73986486,\n",
      "       0.73986486, 0.73986486, 0.73986486, 0.73986486, 0.73986486,\n",
      "       0.73986486, 0.73986486, 0.73986486, 0.73986486, 0.73986486,\n",
      "       0.73986486, 0.73986486, 0.73986486, 0.73986486, 0.73986486,\n",
      "       0.73986486, 0.73986486, 0.73986486, 0.73986486, 0.73986486,\n",
      "       0.73986486, 0.73986486, 0.73986486, 0.73986486, 0.73986486,\n",
      "       0.73986486, 0.73986486, 0.73986486, 0.73986486, 0.73986486,\n",
      "       0.73986486, 0.73986486, 0.73986486, 0.73986486, 0.73986486,\n",
      "       0.73986486, 0.73986486, 0.73986486, 0.73986486, 0.73986486,\n",
      "       0.73986486, 0.73986486, 0.73986486, 0.73986486, 0.73986486,\n",
      "       0.73986486, 0.73986486, 0.73986486, 0.73986486, 0.73986486,\n",
      "       0.73986486, 0.73986486, 0.73986486, 0.73986486, 0.73986486,\n",
      "       0.73986486, 0.73986486, 0.73986486, 0.73986486, 0.73986486,\n",
      "       0.73986486, 0.73986486, 0.73986486, 0.73986486, 0.73986486,\n",
      "       0.73986486, 0.73986486, 0.73986486, 0.73986486, 0.73986486,\n",
      "       0.73986486, 0.73986486, 0.73986486, 0.73986486, 0.73986486]), 'split48_test_score': array([0.71114865, 0.71114865, 0.71114865, 0.70945946, 0.70945946,\n",
      "       0.70777027, 0.70777027, 0.71114865, 0.71114865, 0.70945946,\n",
      "       0.70945946, 0.70945946, 0.70945946, 0.70945946, 0.71114865,\n",
      "       0.70945946, 0.70945946, 0.70945946, 0.70945946, 0.70945946,\n",
      "       0.70945946, 0.70945946, 0.70945946, 0.70945946, 0.70945946,\n",
      "       0.70945946, 0.70945946, 0.70945946, 0.70945946, 0.70945946,\n",
      "       0.70945946, 0.70945946, 0.70945946, 0.70945946, 0.70945946,\n",
      "       0.70945946, 0.70945946, 0.70945946, 0.70945946, 0.70945946,\n",
      "       0.70945946, 0.70945946, 0.70945946, 0.70945946, 0.70945946,\n",
      "       0.70945946, 0.70945946, 0.70945946, 0.70945946, 0.70945946,\n",
      "       0.70945946, 0.70945946, 0.70945946, 0.70945946, 0.70945946,\n",
      "       0.70945946, 0.70945946, 0.70945946, 0.70945946, 0.70945946,\n",
      "       0.70945946, 0.70945946, 0.70945946, 0.70945946, 0.70945946,\n",
      "       0.70945946, 0.70945946, 0.70945946, 0.70945946, 0.70945946,\n",
      "       0.71114865, 0.71114865, 0.71114865, 0.71114865, 0.71114865,\n",
      "       0.71114865, 0.71114865, 0.71114865, 0.71114865, 0.71114865,\n",
      "       0.71114865, 0.71114865, 0.70945946, 0.70945946, 0.70945946,\n",
      "       0.70945946, 0.70945946, 0.70945946, 0.70945946, 0.70945946,\n",
      "       0.70945946, 0.70945946, 0.70945946, 0.70945946, 0.70945946,\n",
      "       0.70945946, 0.70945946, 0.70945946, 0.70945946, 0.70945946]), 'split49_test_score': array([0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892]), 'split50_test_score': array([0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745]), 'split51_test_score': array([0.73187184, 0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 ,\n",
      "       0.7301855 , 0.7301855 , 0.73187184, 0.73187184, 0.7301855 ,\n",
      "       0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 , 0.73187184,\n",
      "       0.73187184, 0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 ,\n",
      "       0.7301855 , 0.73187184, 0.73187184, 0.73187184, 0.7301855 ,\n",
      "       0.7301855 , 0.7301855 , 0.7301855 , 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.7301855 , 0.7301855 , 0.7301855 , 0.7301855 ,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.7301855 , 0.7301855 , 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.7301855 , 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.7301855 , 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184]), 'split52_test_score': array([0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 ,\n",
      "       0.74873524, 0.74873524, 0.7470489 , 0.7470489 , 0.7470489 ,\n",
      "       0.7470489 , 0.7470489 , 0.7470489 , 0.74873524, 0.7470489 ,\n",
      "       0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 ,\n",
      "       0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 ,\n",
      "       0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 ,\n",
      "       0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 ,\n",
      "       0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 ,\n",
      "       0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 ,\n",
      "       0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 ,\n",
      "       0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 ,\n",
      "       0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 ,\n",
      "       0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 ,\n",
      "       0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 ,\n",
      "       0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 ,\n",
      "       0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 ,\n",
      "       0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 ,\n",
      "       0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 ,\n",
      "       0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 ,\n",
      "       0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 ]), 'split53_test_score': array([0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745]), 'split54_test_score': array([0.7386172 , 0.73524452, 0.73693086, 0.7386172 , 0.7386172 ,\n",
      "       0.73693086, 0.73693086, 0.74030354, 0.7386172 , 0.7386172 ,\n",
      "       0.73693086, 0.7386172 , 0.7386172 , 0.7386172 , 0.74030354,\n",
      "       0.74030354, 0.7386172 , 0.7386172 , 0.74030354, 0.7386172 ,\n",
      "       0.7386172 , 0.74030354, 0.74030354, 0.7386172 , 0.7386172 ,\n",
      "       0.74030354, 0.74030354, 0.74030354, 0.74030354, 0.74030354,\n",
      "       0.7386172 , 0.7386172 , 0.74030354, 0.74030354, 0.74030354,\n",
      "       0.74030354, 0.74030354, 0.74030354, 0.7386172 , 0.7386172 ,\n",
      "       0.74030354, 0.74030354, 0.74030354, 0.74030354, 0.74030354,\n",
      "       0.7386172 , 0.7386172 , 0.74030354, 0.74030354, 0.74030354,\n",
      "       0.74030354, 0.7386172 , 0.74030354, 0.7386172 , 0.74030354,\n",
      "       0.74030354, 0.74030354, 0.74030354, 0.74030354, 0.74030354,\n",
      "       0.74030354, 0.7386172 , 0.74030354, 0.74030354, 0.74030354,\n",
      "       0.74030354, 0.74030354, 0.74030354, 0.7386172 , 0.74030354,\n",
      "       0.74030354, 0.74030354, 0.74030354, 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.74030354, 0.74030354, 0.74030354, 0.74030354,\n",
      "       0.74030354, 0.74030354, 0.74030354, 0.74030354, 0.74030354,\n",
      "       0.74030354, 0.74030354, 0.74030354, 0.74030354, 0.74030354,\n",
      "       0.74030354, 0.74030354, 0.74030354, 0.74030354, 0.74030354,\n",
      "       0.74030354, 0.74030354, 0.74030354, 0.74030354, 0.74030354]), 'split55_test_score': array([0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73187184, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73524452, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818]), 'split56_test_score': array([0.72175379, 0.72175379, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72006745, 0.72006745, 0.72006745, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72006745, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72344013, 0.72175379, 0.72175379,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013]), 'split57_test_score': array([0.70439189, 0.70439189, 0.70439189, 0.70439189, 0.70439189,\n",
      "       0.70439189, 0.70439189, 0.70439189, 0.70439189, 0.70439189,\n",
      "       0.70439189, 0.70608108, 0.70608108, 0.70608108, 0.70439189,\n",
      "       0.70608108, 0.70608108, 0.70608108, 0.70608108, 0.70608108,\n",
      "       0.70608108, 0.70439189, 0.70608108, 0.70608108, 0.70608108,\n",
      "       0.70608108, 0.70608108, 0.70608108, 0.70439189, 0.70439189,\n",
      "       0.70439189, 0.70439189, 0.70439189, 0.70608108, 0.70608108,\n",
      "       0.70439189, 0.70439189, 0.70439189, 0.70439189, 0.70439189,\n",
      "       0.70439189, 0.70439189, 0.70439189, 0.70439189, 0.70439189,\n",
      "       0.70439189, 0.70439189, 0.70439189, 0.70439189, 0.70439189,\n",
      "       0.70439189, 0.70439189, 0.70439189, 0.70439189, 0.70439189,\n",
      "       0.70439189, 0.70439189, 0.70439189, 0.70439189, 0.70439189,\n",
      "       0.70439189, 0.70439189, 0.70439189, 0.70439189, 0.70439189,\n",
      "       0.70439189, 0.70439189, 0.70439189, 0.70439189, 0.70439189,\n",
      "       0.70439189, 0.70439189, 0.70439189, 0.70439189, 0.70439189,\n",
      "       0.70439189, 0.70439189, 0.70439189, 0.7027027 , 0.70439189,\n",
      "       0.70439189, 0.70439189, 0.70439189, 0.70439189, 0.70439189,\n",
      "       0.70439189, 0.70439189, 0.70439189, 0.70439189, 0.70439189,\n",
      "       0.70439189, 0.70439189, 0.70439189, 0.70439189, 0.70439189,\n",
      "       0.70439189, 0.70439189, 0.70439189, 0.70439189, 0.70439189]), 'split58_test_score': array([0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 ,\n",
      "       0.73648649, 0.73648649, 0.73310811, 0.7347973 , 0.7347973 ,\n",
      "       0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 , 0.73310811,\n",
      "       0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 ,\n",
      "       0.7347973 , 0.73310811, 0.73310811, 0.7347973 , 0.7347973 ,\n",
      "       0.7347973 , 0.7347973 , 0.7347973 , 0.73310811, 0.73310811,\n",
      "       0.73310811, 0.7347973 , 0.7347973 , 0.7347973 , 0.7347973 ,\n",
      "       0.73310811, 0.73310811, 0.73310811, 0.73310811, 0.73310811,\n",
      "       0.73310811, 0.73310811, 0.73310811, 0.73310811, 0.73310811,\n",
      "       0.73310811, 0.73141892, 0.73310811, 0.73310811, 0.73310811,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73310811, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73310811, 0.73310811, 0.73310811, 0.73310811, 0.73310811,\n",
      "       0.73310811, 0.73310811, 0.73310811, 0.73310811, 0.73310811,\n",
      "       0.73310811, 0.73310811, 0.73310811, 0.73310811, 0.73310811,\n",
      "       0.73310811, 0.73310811, 0.73310811, 0.73310811, 0.73310811,\n",
      "       0.73310811, 0.73310811, 0.73310811, 0.73310811, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892]), 'split59_test_score': array([0.71452703, 0.71621622, 0.71621622, 0.71621622, 0.71790541,\n",
      "       0.71959459, 0.71959459, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71621622, 0.71621622, 0.71790541, 0.71790541, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71621622, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703]), 'split60_test_score': array([0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71838111, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477]), 'split61_test_score': array([0.67116358, 0.67116358, 0.67116358, 0.67116358, 0.67116358,\n",
      "       0.67116358, 0.67116358, 0.67116358, 0.67116358, 0.67116358,\n",
      "       0.67116358, 0.67116358, 0.67116358, 0.67116358, 0.67116358,\n",
      "       0.67116358, 0.67116358, 0.67116358, 0.67116358, 0.67116358,\n",
      "       0.67116358, 0.67116358, 0.67116358, 0.67116358, 0.67116358,\n",
      "       0.67116358, 0.67116358, 0.67116358, 0.67116358, 0.67116358,\n",
      "       0.67116358, 0.67116358, 0.67116358, 0.67116358, 0.67116358,\n",
      "       0.67116358, 0.67116358, 0.67116358, 0.67116358, 0.67116358,\n",
      "       0.67116358, 0.67116358, 0.67116358, 0.67116358, 0.67116358,\n",
      "       0.67116358, 0.67116358, 0.67116358, 0.67116358, 0.67116358,\n",
      "       0.67116358, 0.67116358, 0.67116358, 0.67116358, 0.67116358,\n",
      "       0.67116358, 0.67116358, 0.67116358, 0.67116358, 0.67116358,\n",
      "       0.67116358, 0.67116358, 0.67116358, 0.67116358, 0.67116358,\n",
      "       0.67116358, 0.67116358, 0.67116358, 0.67116358, 0.67116358,\n",
      "       0.67116358, 0.67116358, 0.67116358, 0.67116358, 0.67116358,\n",
      "       0.67116358, 0.67116358, 0.67116358, 0.67116358, 0.67116358,\n",
      "       0.67116358, 0.67116358, 0.67116358, 0.67116358, 0.67116358,\n",
      "       0.67116358, 0.67116358, 0.67116358, 0.67116358, 0.67116358,\n",
      "       0.67116358, 0.67116358, 0.67116358, 0.67116358, 0.67116358,\n",
      "       0.67116358, 0.67116358, 0.67116358, 0.67116358, 0.67116358]), 'split62_test_score': array([0.73693086, 0.73693086, 0.73693086, 0.74030354, 0.74030354,\n",
      "       0.74030354, 0.74030354, 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.74030354, 0.74030354, 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.73693086, 0.73693086, 0.73693086, 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ]), 'split63_test_score': array([0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75716695, 0.75716695, 0.75716695,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75716695, 0.75716695, 0.75716695, 0.75716695,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75716695, 0.75716695, 0.75716695, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75716695, 0.75716695,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061]), 'split64_test_score': array([0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061,\n",
      "       0.75548061, 0.75548061, 0.75548061, 0.75548061, 0.75548061]), 'split65_test_score': array([0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477]), 'split66_test_score': array([0.73524452, 0.73524452, 0.73524452, 0.73693086, 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.73524452, 0.73524452, 0.73524452,\n",
      "       0.73524452, 0.73524452, 0.73524452, 0.73693086, 0.73524452,\n",
      "       0.73524452, 0.73524452, 0.73524452, 0.73524452, 0.73524452,\n",
      "       0.73524452, 0.73693086, 0.73693086, 0.73524452, 0.73524452,\n",
      "       0.73524452, 0.73524452, 0.73524452, 0.73693086, 0.73693086,\n",
      "       0.73693086, 0.73693086, 0.73693086, 0.73524452, 0.73524452,\n",
      "       0.73693086, 0.73693086, 0.73693086, 0.73693086, 0.73693086,\n",
      "       0.73693086, 0.73693086, 0.73693086, 0.73693086, 0.73693086,\n",
      "       0.73693086, 0.73693086, 0.73693086, 0.73693086, 0.73693086,\n",
      "       0.73693086, 0.73693086, 0.73693086, 0.73693086, 0.73693086,\n",
      "       0.73693086, 0.73693086, 0.73693086, 0.73693086, 0.73693086,\n",
      "       0.73693086, 0.73693086, 0.73693086, 0.73693086, 0.73693086,\n",
      "       0.73693086, 0.73693086, 0.73693086, 0.73693086, 0.73693086,\n",
      "       0.73524452, 0.73524452, 0.73524452, 0.73524452, 0.73524452,\n",
      "       0.73524452, 0.73524452, 0.73524452, 0.73524452, 0.73693086,\n",
      "       0.73693086, 0.73693086, 0.73693086, 0.73693086, 0.73693086,\n",
      "       0.73693086, 0.73693086, 0.73693086, 0.73693086, 0.73693086,\n",
      "       0.73693086, 0.73693086, 0.73693086, 0.73693086, 0.73693086,\n",
      "       0.73693086, 0.73693086, 0.73693086, 0.73693086, 0.73693086]), 'split67_test_score': array([0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73310811,\n",
      "       0.73310811, 0.73310811, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73310811, 0.73310811, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892,\n",
      "       0.73141892, 0.73141892, 0.73141892, 0.73141892, 0.73141892]), 'split68_test_score': array([0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71621622, 0.71621622, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71790541,\n",
      "       0.71790541, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71959459, 0.71959459, 0.71959459, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622]), 'split69_test_score': array([0.71114865, 0.71114865, 0.71114865, 0.71114865, 0.71114865,\n",
      "       0.71114865, 0.71283784, 0.71114865, 0.71114865, 0.71114865,\n",
      "       0.71114865, 0.71283784, 0.71114865, 0.71114865, 0.71114865,\n",
      "       0.71114865, 0.71114865, 0.71114865, 0.71114865, 0.71283784,\n",
      "       0.71283784, 0.71114865, 0.71114865, 0.71114865, 0.71114865,\n",
      "       0.71114865, 0.71114865, 0.71283784, 0.71114865, 0.71114865,\n",
      "       0.71114865, 0.71114865, 0.71114865, 0.71114865, 0.71283784,\n",
      "       0.71114865, 0.71114865, 0.71114865, 0.71114865, 0.71114865,\n",
      "       0.71114865, 0.71114865, 0.71114865, 0.71114865, 0.71114865,\n",
      "       0.71114865, 0.71114865, 0.71114865, 0.71114865, 0.71114865,\n",
      "       0.71114865, 0.71114865, 0.71114865, 0.71283784, 0.71283784,\n",
      "       0.71283784, 0.71114865, 0.71114865, 0.71283784, 0.71283784,\n",
      "       0.71283784, 0.71283784, 0.71283784, 0.71114865, 0.71283784,\n",
      "       0.71283784, 0.71283784, 0.71283784, 0.71283784, 0.71283784,\n",
      "       0.71283784, 0.71283784, 0.71283784, 0.71114865, 0.71114865,\n",
      "       0.71114865, 0.71114865, 0.71114865, 0.71114865, 0.71114865,\n",
      "       0.71114865, 0.71114865, 0.71114865, 0.71114865, 0.71114865,\n",
      "       0.71114865, 0.71114865, 0.71114865, 0.71114865, 0.71114865,\n",
      "       0.71114865, 0.71114865, 0.71114865, 0.71114865, 0.71114865,\n",
      "       0.71114865, 0.71114865, 0.71114865, 0.71114865, 0.71114865]), 'split70_test_score': array([0.73187184, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818]), 'split71_test_score': array([0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72006745, 0.72006745, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72175379, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745]), 'split72_test_score': array([0.72681282, 0.72681282, 0.72512648, 0.72512648, 0.72512648,\n",
      "       0.72512648, 0.72512648, 0.72512648, 0.72681282, 0.72512648,\n",
      "       0.72512648, 0.72512648, 0.72512648, 0.72512648, 0.72512648,\n",
      "       0.72512648, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72512648, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72512648, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72512648, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72512648, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72512648,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72344013, 0.72344013, 0.72344013, 0.72344013, 0.72344013,\n",
      "       0.72849916, 0.72849916, 0.72849916, 0.72512648, 0.72512648,\n",
      "       0.72512648, 0.72512648, 0.72512648, 0.72512648, 0.72512648,\n",
      "       0.72512648, 0.72512648, 0.72512648, 0.72512648, 0.72512648,\n",
      "       0.72512648, 0.72512648, 0.72512648, 0.72512648, 0.72512648,\n",
      "       0.72512648, 0.72512648, 0.72512648, 0.72512648, 0.72512648,\n",
      "       0.72512648, 0.72512648, 0.72344013, 0.72512648, 0.72512648]), 'split73_test_score': array([0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74198988, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622]), 'split74_test_score': array([0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184,\n",
      "       0.73187184, 0.73187184, 0.73187184, 0.73187184, 0.73187184]), 'split75_test_score': array([0.73355818, 0.73355818, 0.73355818, 0.73524452, 0.73524452,\n",
      "       0.73524452, 0.73524452, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73524452, 0.73524452, 0.73524452, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73524452, 0.73524452,\n",
      "       0.73524452, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73524452, 0.73524452, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73524452, 0.73524452,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73524452, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73524452, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73524452, 0.73524452, 0.73524452, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818,\n",
      "       0.73355818, 0.73355818, 0.73355818, 0.73355818, 0.73355818]), 'split76_test_score': array([0.71163575, 0.71163575, 0.71163575, 0.71163575, 0.71163575,\n",
      "       0.70994941, 0.70994941, 0.71163575, 0.71163575, 0.71163575,\n",
      "       0.71163575, 0.71163575, 0.71163575, 0.70994941, 0.71163575,\n",
      "       0.71163575, 0.71163575, 0.71163575, 0.71163575, 0.71163575,\n",
      "       0.71163575, 0.71163575, 0.71163575, 0.71163575, 0.71163575,\n",
      "       0.71163575, 0.71163575, 0.71163575, 0.71163575, 0.71163575,\n",
      "       0.71163575, 0.71163575, 0.71163575, 0.71163575, 0.71163575,\n",
      "       0.71163575, 0.71163575, 0.71163575, 0.71163575, 0.71163575,\n",
      "       0.71163575, 0.71163575, 0.71163575, 0.71163575, 0.71163575,\n",
      "       0.71163575, 0.71163575, 0.71163575, 0.71163575, 0.71163575,\n",
      "       0.71163575, 0.71163575, 0.71163575, 0.71163575, 0.71163575,\n",
      "       0.71163575, 0.71163575, 0.71163575, 0.71163575, 0.71163575,\n",
      "       0.71163575, 0.71163575, 0.71163575, 0.71163575, 0.71163575,\n",
      "       0.71163575, 0.71163575, 0.71163575, 0.71163575, 0.71163575,\n",
      "       0.71163575, 0.71163575, 0.71163575, 0.71163575, 0.71163575,\n",
      "       0.71163575, 0.71163575, 0.71163575, 0.71163575, 0.71163575,\n",
      "       0.71163575, 0.71163575, 0.71163575, 0.71163575, 0.71163575,\n",
      "       0.71163575, 0.71163575, 0.71163575, 0.71163575, 0.71163575,\n",
      "       0.71163575, 0.71163575, 0.71163575, 0.71163575, 0.71163575,\n",
      "       0.71163575, 0.71163575, 0.71163575, 0.71163575, 0.71163575]), 'split77_test_score': array([0.71959459, 0.71959459, 0.71959459, 0.72128378, 0.72466216,\n",
      "       0.72466216, 0.72466216, 0.71959459, 0.71959459, 0.71959459,\n",
      "       0.72128378, 0.72128378, 0.72297297, 0.72297297, 0.71959459,\n",
      "       0.72128378, 0.72128378, 0.72128378, 0.72128378, 0.72128378,\n",
      "       0.72297297, 0.72128378, 0.72128378, 0.72128378, 0.72128378,\n",
      "       0.72128378, 0.72128378, 0.72128378, 0.72128378, 0.72128378,\n",
      "       0.72128378, 0.72128378, 0.72128378, 0.72128378, 0.72128378,\n",
      "       0.72128378, 0.72128378, 0.72128378, 0.72128378, 0.72128378,\n",
      "       0.72128378, 0.72128378, 0.72128378, 0.72128378, 0.72128378,\n",
      "       0.72128378, 0.72128378, 0.72128378, 0.72128378, 0.72128378,\n",
      "       0.72128378, 0.72128378, 0.72128378, 0.72128378, 0.72128378,\n",
      "       0.72128378, 0.72128378, 0.72128378, 0.72128378, 0.72128378,\n",
      "       0.72128378, 0.72128378, 0.72128378, 0.72128378, 0.72128378,\n",
      "       0.72128378, 0.72128378, 0.72128378, 0.72128378, 0.72128378,\n",
      "       0.71959459, 0.71959459, 0.71959459, 0.71959459, 0.71959459,\n",
      "       0.71959459, 0.71959459, 0.71959459, 0.71959459, 0.71959459,\n",
      "       0.71959459, 0.71959459, 0.72128378, 0.72128378, 0.71959459,\n",
      "       0.72128378, 0.72128378, 0.72128378, 0.72128378, 0.72128378,\n",
      "       0.72128378, 0.72128378, 0.72128378, 0.72128378, 0.72128378,\n",
      "       0.72128378, 0.72128378, 0.72128378, 0.72128378, 0.72128378]), 'split78_test_score': array([0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71790541]), 'split79_test_score': array([0.72297297, 0.72297297, 0.72297297, 0.72297297, 0.72297297,\n",
      "       0.72466216, 0.72466216, 0.72297297, 0.72297297, 0.72297297,\n",
      "       0.72297297, 0.72297297, 0.72297297, 0.72297297, 0.72297297,\n",
      "       0.72297297, 0.72297297, 0.72297297, 0.72297297, 0.72297297,\n",
      "       0.72297297, 0.72297297, 0.72297297, 0.72297297, 0.72297297,\n",
      "       0.72297297, 0.72297297, 0.72297297, 0.72297297, 0.72297297,\n",
      "       0.72297297, 0.72297297, 0.72297297, 0.72297297, 0.72297297,\n",
      "       0.72466216, 0.72297297, 0.72297297, 0.72297297, 0.72297297,\n",
      "       0.72297297, 0.72297297, 0.72466216, 0.72297297, 0.72297297,\n",
      "       0.72297297, 0.72297297, 0.72297297, 0.72297297, 0.72466216,\n",
      "       0.72297297, 0.72297297, 0.72297297, 0.72297297, 0.72297297,\n",
      "       0.72297297, 0.72466216, 0.72466216, 0.72297297, 0.72297297,\n",
      "       0.72297297, 0.72297297, 0.72297297, 0.72466216, 0.72466216,\n",
      "       0.72466216, 0.72297297, 0.72297297, 0.72297297, 0.72297297,\n",
      "       0.72297297, 0.72297297, 0.72297297, 0.72297297, 0.72297297,\n",
      "       0.72297297, 0.72297297, 0.72297297, 0.72297297, 0.72466216,\n",
      "       0.72297297, 0.72297297, 0.72466216, 0.72466216, 0.72466216,\n",
      "       0.72466216, 0.72466216, 0.72466216, 0.72466216, 0.72466216,\n",
      "       0.72466216, 0.72466216, 0.72466216, 0.72466216, 0.72466216,\n",
      "       0.72466216, 0.72466216, 0.72466216, 0.72466216, 0.72466216]), 'split80_test_score': array([0.71163575, 0.71163575, 0.71163575, 0.71163575, 0.71163575,\n",
      "       0.71163575, 0.71163575, 0.71163575, 0.71163575, 0.71163575,\n",
      "       0.71163575, 0.71163575, 0.71163575, 0.71163575, 0.71163575,\n",
      "       0.71163575, 0.71163575, 0.71163575, 0.71163575, 0.71163575,\n",
      "       0.71163575, 0.71163575, 0.71163575, 0.71163575, 0.71163575,\n",
      "       0.71163575, 0.71163575, 0.71163575, 0.71163575, 0.71163575,\n",
      "       0.71163575, 0.71163575, 0.71163575, 0.71163575, 0.71163575,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71163575,\n",
      "       0.71163575, 0.71163575, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71163575, 0.71163575, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71163575, 0.71163575, 0.71163575, 0.71163575, 0.71163575,\n",
      "       0.71163575, 0.71163575, 0.71163575, 0.71163575, 0.71163575,\n",
      "       0.71163575, 0.71163575, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209]), 'split81_test_score': array([0.72681282, 0.72681282, 0.72681282, 0.72681282, 0.72681282,\n",
      "       0.72681282, 0.72681282, 0.72681282, 0.72681282, 0.72681282,\n",
      "       0.72681282, 0.72681282, 0.72681282, 0.72681282, 0.72681282,\n",
      "       0.72681282, 0.72681282, 0.72681282, 0.72681282, 0.72681282,\n",
      "       0.72681282, 0.72681282, 0.72681282, 0.72681282, 0.72681282,\n",
      "       0.72681282, 0.72681282, 0.72681282, 0.72681282, 0.72681282,\n",
      "       0.72681282, 0.72681282, 0.72681282, 0.72681282, 0.72681282,\n",
      "       0.72681282, 0.72681282, 0.72681282, 0.72681282, 0.72681282,\n",
      "       0.72681282, 0.72681282, 0.72681282, 0.72681282, 0.72681282,\n",
      "       0.72681282, 0.72681282, 0.72681282, 0.72681282, 0.72681282,\n",
      "       0.72681282, 0.72681282, 0.72681282, 0.72681282, 0.72681282,\n",
      "       0.72681282, 0.72681282, 0.72681282, 0.72681282, 0.72681282,\n",
      "       0.72681282, 0.72681282, 0.72681282, 0.72681282, 0.72681282,\n",
      "       0.72681282, 0.72681282, 0.72681282, 0.72681282, 0.72681282,\n",
      "       0.72681282, 0.72681282, 0.72681282, 0.72681282, 0.72681282,\n",
      "       0.72681282, 0.72681282, 0.72681282, 0.72681282, 0.72681282,\n",
      "       0.72681282, 0.72681282, 0.72681282, 0.72681282, 0.72681282,\n",
      "       0.72681282, 0.72681282, 0.72681282, 0.72681282, 0.72681282,\n",
      "       0.72681282, 0.72681282, 0.72681282, 0.72681282, 0.72681282,\n",
      "       0.72681282, 0.72681282, 0.72681282, 0.72681282, 0.72681282]), 'split82_test_score': array([0.75042159, 0.75042159, 0.75042159, 0.75042159, 0.75042159,\n",
      "       0.75042159, 0.75042159, 0.75042159, 0.75042159, 0.75042159,\n",
      "       0.75042159, 0.75042159, 0.75042159, 0.75042159, 0.75042159,\n",
      "       0.75042159, 0.75042159, 0.75042159, 0.75042159, 0.75042159,\n",
      "       0.75042159, 0.75042159, 0.75042159, 0.75042159, 0.75042159,\n",
      "       0.75042159, 0.75042159, 0.75042159, 0.75042159, 0.75042159,\n",
      "       0.75042159, 0.75042159, 0.75042159, 0.75042159, 0.75042159,\n",
      "       0.75042159, 0.75042159, 0.75042159, 0.75042159, 0.75042159,\n",
      "       0.75042159, 0.75042159, 0.75042159, 0.75042159, 0.75042159,\n",
      "       0.75042159, 0.75042159, 0.75042159, 0.75042159, 0.75042159,\n",
      "       0.75042159, 0.75042159, 0.75042159, 0.75042159, 0.75042159,\n",
      "       0.75042159, 0.75042159, 0.75042159, 0.75042159, 0.75042159,\n",
      "       0.75042159, 0.75042159, 0.75042159, 0.75042159, 0.75042159,\n",
      "       0.75042159, 0.75042159, 0.75042159, 0.75042159, 0.75042159,\n",
      "       0.75042159, 0.75042159, 0.75042159, 0.75042159, 0.75042159,\n",
      "       0.75042159, 0.75042159, 0.75042159, 0.75042159, 0.75042159,\n",
      "       0.75042159, 0.75042159, 0.75042159, 0.75042159, 0.75042159,\n",
      "       0.75042159, 0.75042159, 0.75042159, 0.75042159, 0.75042159,\n",
      "       0.75042159, 0.75042159, 0.75042159, 0.75042159, 0.75042159,\n",
      "       0.75042159, 0.75042159, 0.75042159, 0.75042159, 0.75042159]), 'split83_test_score': array([0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.73693086, 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.73693086, 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.73693086,\n",
      "       0.73693086, 0.73693086, 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.73693086, 0.73693086, 0.73693086, 0.73693086,\n",
      "       0.73693086, 0.7386172 , 0.7386172 , 0.73693086, 0.73693086,\n",
      "       0.73693086, 0.73693086, 0.73693086, 0.73693086, 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 ,\n",
      "       0.7386172 , 0.7386172 , 0.7386172 , 0.7386172 , 0.73693086,\n",
      "       0.73693086, 0.73693086, 0.73693086, 0.73693086, 0.73693086,\n",
      "       0.73693086, 0.73693086, 0.73693086, 0.73693086, 0.73693086,\n",
      "       0.73693086, 0.73693086, 0.73693086, 0.73693086, 0.73693086]), 'split84_test_score': array([0.71500843, 0.71500843, 0.71500843, 0.71500843, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71500843, 0.71500843, 0.71500843,\n",
      "       0.71500843, 0.71500843, 0.71500843, 0.71500843, 0.71500843,\n",
      "       0.71500843, 0.71500843, 0.71500843, 0.71500843, 0.71500843,\n",
      "       0.71500843, 0.71500843, 0.71500843, 0.71500843, 0.71500843,\n",
      "       0.71500843, 0.71500843, 0.71500843, 0.71500843, 0.71500843,\n",
      "       0.71500843, 0.71500843, 0.71500843, 0.71500843, 0.71500843,\n",
      "       0.71500843, 0.71500843, 0.71500843, 0.71500843, 0.71500843,\n",
      "       0.71500843, 0.71500843, 0.71500843, 0.71500843, 0.71500843,\n",
      "       0.71500843, 0.71500843, 0.71500843, 0.71500843, 0.71500843,\n",
      "       0.71500843, 0.71500843, 0.71500843, 0.71500843, 0.71500843,\n",
      "       0.71500843, 0.71500843, 0.71500843, 0.71500843, 0.71500843,\n",
      "       0.71500843, 0.71500843, 0.71500843, 0.71500843, 0.71500843,\n",
      "       0.71500843, 0.71500843, 0.71500843, 0.71500843, 0.71500843,\n",
      "       0.71500843, 0.71500843, 0.71500843, 0.71500843, 0.71500843,\n",
      "       0.71500843, 0.71500843, 0.71500843, 0.71500843, 0.71500843,\n",
      "       0.71500843, 0.71500843, 0.71500843, 0.71500843, 0.71500843,\n",
      "       0.71500843, 0.71500843, 0.71500843, 0.71500843, 0.71500843,\n",
      "       0.71500843, 0.71500843, 0.71500843, 0.71500843, 0.71500843,\n",
      "       0.71500843, 0.71500843, 0.71500843, 0.71500843, 0.71500843]), 'split85_test_score': array([0.74536256, 0.74536256, 0.74536256, 0.7470489 , 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.7470489 , 0.7470489 , 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.7470489 , 0.7470489 , 0.7470489 ,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.74536256, 0.7470489 ,\n",
      "       0.7470489 , 0.7470489 , 0.7470489 , 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.7470489 , 0.7470489 , 0.7470489 , 0.7470489 ,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.74536256, 0.7470489 ,\n",
      "       0.7470489 , 0.7470489 , 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.7470489 , 0.7470489 , 0.7470489 , 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.7470489 , 0.7470489 ,\n",
      "       0.7470489 , 0.74536256, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.7470489 , 0.7470489 , 0.7470489 , 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.7470489 , 0.7470489 , 0.7470489 ,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.74536256, 0.74536256]), 'split86_test_score': array([0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71669477, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71669477, 0.71669477, 0.71669477, 0.71838111,\n",
      "       0.71838111, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477,\n",
      "       0.71669477, 0.71669477, 0.71669477, 0.71669477, 0.71669477]), 'split87_test_score': array([0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71452703, 0.71452703, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71452703, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71452703, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71621622, 0.71621622, 0.71621622, 0.71621622, 0.71621622,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703,\n",
      "       0.71452703, 0.71452703, 0.71452703, 0.71452703, 0.71452703]), 'split88_test_score': array([0.69594595, 0.69594595, 0.69594595, 0.69594595, 0.69594595,\n",
      "       0.69594595, 0.69594595, 0.69594595, 0.69594595, 0.69594595,\n",
      "       0.69594595, 0.69594595, 0.69594595, 0.69594595, 0.69594595,\n",
      "       0.69594595, 0.69594595, 0.69594595, 0.69594595, 0.69594595,\n",
      "       0.69594595, 0.69594595, 0.69594595, 0.69594595, 0.69594595,\n",
      "       0.69594595, 0.69594595, 0.69594595, 0.69594595, 0.69594595,\n",
      "       0.69594595, 0.69594595, 0.69594595, 0.69594595, 0.69594595,\n",
      "       0.69594595, 0.69594595, 0.69594595, 0.69594595, 0.69594595,\n",
      "       0.69594595, 0.69594595, 0.69594595, 0.69594595, 0.69594595,\n",
      "       0.69594595, 0.69594595, 0.69594595, 0.69594595, 0.69594595,\n",
      "       0.69594595, 0.69594595, 0.69594595, 0.69594595, 0.69594595,\n",
      "       0.69594595, 0.69594595, 0.69594595, 0.69594595, 0.69594595,\n",
      "       0.69594595, 0.69594595, 0.69594595, 0.69594595, 0.69594595,\n",
      "       0.69594595, 0.69594595, 0.69594595, 0.69594595, 0.69594595,\n",
      "       0.69594595, 0.69594595, 0.69594595, 0.69594595, 0.69594595,\n",
      "       0.69594595, 0.69594595, 0.69594595, 0.69594595, 0.69594595,\n",
      "       0.69594595, 0.69594595, 0.69594595, 0.69594595, 0.69594595,\n",
      "       0.69594595, 0.69594595, 0.69594595, 0.69594595, 0.69594595,\n",
      "       0.69594595, 0.69594595, 0.69594595, 0.69594595, 0.69594595,\n",
      "       0.69594595, 0.69594595, 0.69594595, 0.69594595, 0.69594595]), 'split89_test_score': array([0.75506757, 0.75337838, 0.75337838, 0.75337838, 0.75337838,\n",
      "       0.75337838, 0.75337838, 0.75337838, 0.75337838, 0.75506757,\n",
      "       0.75506757, 0.75506757, 0.75506757, 0.75506757, 0.75506757,\n",
      "       0.75506757, 0.75506757, 0.75506757, 0.75506757, 0.75506757,\n",
      "       0.75506757, 0.75506757, 0.75506757, 0.75506757, 0.75506757,\n",
      "       0.75506757, 0.75506757, 0.75506757, 0.75337838, 0.75506757,\n",
      "       0.75506757, 0.75506757, 0.75506757, 0.75506757, 0.75506757,\n",
      "       0.75337838, 0.75506757, 0.75506757, 0.75506757, 0.75506757,\n",
      "       0.75506757, 0.75506757, 0.75337838, 0.75506757, 0.75506757,\n",
      "       0.75506757, 0.75506757, 0.75506757, 0.75506757, 0.75337838,\n",
      "       0.75506757, 0.75506757, 0.75506757, 0.75506757, 0.75506757,\n",
      "       0.75506757, 0.75337838, 0.75337838, 0.75506757, 0.75506757,\n",
      "       0.75506757, 0.75506757, 0.75506757, 0.75337838, 0.75337838,\n",
      "       0.75506757, 0.75506757, 0.75506757, 0.75506757, 0.75506757,\n",
      "       0.75168919, 0.75168919, 0.75168919, 0.75      , 0.75      ,\n",
      "       0.75      , 0.75337838, 0.75337838, 0.75337838, 0.75337838,\n",
      "       0.75337838, 0.75337838, 0.75337838, 0.75337838, 0.75337838,\n",
      "       0.75337838, 0.75337838, 0.75337838, 0.75337838, 0.75337838,\n",
      "       0.75337838, 0.75337838, 0.75337838, 0.75337838, 0.75337838,\n",
      "       0.75337838, 0.75337838, 0.75337838, 0.75337838, 0.75337838]), 'split90_test_score': array([0.71838111, 0.71838111, 0.71838111, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.72006745, 0.72006745, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.71838111]), 'split91_test_score': array([0.71500843, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71500843, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71500843, 0.71500843, 0.71500843, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209,\n",
      "       0.71332209, 0.71332209, 0.71332209, 0.71332209, 0.71332209]), 'split92_test_score': array([0.74873524, 0.74873524, 0.74873524, 0.75042159, 0.75042159,\n",
      "       0.75042159, 0.75042159, 0.74873524, 0.74873524, 0.74873524,\n",
      "       0.74873524, 0.75042159, 0.75042159, 0.75042159, 0.74873524,\n",
      "       0.74873524, 0.74873524, 0.74873524, 0.74873524, 0.75042159,\n",
      "       0.75042159, 0.74873524, 0.74873524, 0.74873524, 0.74873524,\n",
      "       0.74873524, 0.74873524, 0.75042159, 0.74873524, 0.74873524,\n",
      "       0.74873524, 0.74873524, 0.74873524, 0.74873524, 0.74873524,\n",
      "       0.74873524, 0.74873524, 0.74873524, 0.74873524, 0.74873524,\n",
      "       0.74873524, 0.74873524, 0.74873524, 0.74873524, 0.74873524,\n",
      "       0.74873524, 0.74873524, 0.74873524, 0.74873524, 0.74873524,\n",
      "       0.74873524, 0.74873524, 0.74873524, 0.74873524, 0.74873524,\n",
      "       0.74873524, 0.74873524, 0.74873524, 0.74873524, 0.74873524,\n",
      "       0.74873524, 0.74873524, 0.74873524, 0.74873524, 0.74873524,\n",
      "       0.74873524, 0.74873524, 0.74873524, 0.74873524, 0.74873524,\n",
      "       0.74873524, 0.74873524, 0.74873524, 0.74873524, 0.74873524,\n",
      "       0.74873524, 0.74873524, 0.74873524, 0.74873524, 0.74873524,\n",
      "       0.74873524, 0.74873524, 0.74873524, 0.74873524, 0.74873524,\n",
      "       0.74873524, 0.74873524, 0.74873524, 0.74873524, 0.74873524,\n",
      "       0.74873524, 0.74873524, 0.74873524, 0.74873524, 0.74873524,\n",
      "       0.74873524, 0.74873524, 0.74873524, 0.74873524, 0.74873524]), 'split93_test_score': array([0.75042159, 0.75042159, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75042159, 0.75042159, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75042159, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75042159,\n",
      "       0.75042159, 0.75042159, 0.75042159, 0.75042159, 0.75042159,\n",
      "       0.75042159, 0.75042159, 0.75042159, 0.75042159, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793,\n",
      "       0.75210793, 0.75210793, 0.75210793, 0.75210793, 0.75210793]), 'split94_test_score': array([0.70657673, 0.70657673, 0.70657673, 0.70657673, 0.70657673,\n",
      "       0.70657673, 0.70657673, 0.70657673, 0.70657673, 0.70657673,\n",
      "       0.70657673, 0.70657673, 0.70657673, 0.70657673, 0.70657673,\n",
      "       0.70657673, 0.70657673, 0.70657673, 0.70657673, 0.70657673,\n",
      "       0.70657673, 0.70657673, 0.70657673, 0.70657673, 0.70657673,\n",
      "       0.70657673, 0.70657673, 0.70657673, 0.70657673, 0.70657673,\n",
      "       0.70657673, 0.70657673, 0.70657673, 0.70657673, 0.70657673,\n",
      "       0.70657673, 0.70657673, 0.70657673, 0.70657673, 0.70657673,\n",
      "       0.70657673, 0.70657673, 0.70657673, 0.70657673, 0.70657673,\n",
      "       0.70657673, 0.70657673, 0.70657673, 0.70657673, 0.70657673,\n",
      "       0.70657673, 0.70657673, 0.70657673, 0.70657673, 0.70657673,\n",
      "       0.70657673, 0.70657673, 0.70657673, 0.70657673, 0.70657673,\n",
      "       0.70657673, 0.70657673, 0.70657673, 0.70657673, 0.70657673,\n",
      "       0.70657673, 0.70657673, 0.70657673, 0.70657673, 0.70657673,\n",
      "       0.70657673, 0.70657673, 0.70657673, 0.70657673, 0.70657673,\n",
      "       0.70657673, 0.70657673, 0.70657673, 0.70657673, 0.70657673,\n",
      "       0.70657673, 0.70657673, 0.70657673, 0.70657673, 0.70657673,\n",
      "       0.70657673, 0.70657673, 0.70657673, 0.70657673, 0.70657673,\n",
      "       0.70657673, 0.70657673, 0.70657673, 0.70657673, 0.70657673,\n",
      "       0.70657673, 0.70657673, 0.70657673, 0.70657673, 0.70657673]), 'split95_test_score': array([0.74367622, 0.74536256, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.74536256, 0.74536256, 0.74536256,\n",
      "       0.74536256, 0.74536256, 0.74367622, 0.74367622, 0.74536256,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74198988, 0.74198988, 0.74198988, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74536256, 0.74536256, 0.74536256, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622,\n",
      "       0.74367622, 0.74367622, 0.74367622, 0.74367622, 0.74367622]), 'split96_test_score': array([0.72006745, 0.71838111, 0.71838111, 0.71838111, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.72006745, 0.72006745, 0.71838111,\n",
      "       0.71838111, 0.71838111, 0.71838111, 0.71838111, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72006745, 0.72006745, 0.71838111,\n",
      "       0.71838111, 0.72175379, 0.72175379, 0.72175379, 0.72006745,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72006745, 0.72006745, 0.72006745, 0.72006745, 0.72006745,\n",
      "       0.72006745, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379,\n",
      "       0.72175379, 0.72175379, 0.72175379, 0.72175379, 0.72175379]), 'split97_test_score': array([0.71283784, 0.71283784, 0.71283784, 0.71283784, 0.71283784,\n",
      "       0.71452703, 0.71452703, 0.71283784, 0.71283784, 0.71283784,\n",
      "       0.71283784, 0.71283784, 0.71452703, 0.71452703, 0.71283784,\n",
      "       0.71283784, 0.71283784, 0.71283784, 0.71283784, 0.71283784,\n",
      "       0.71452703, 0.71283784, 0.71283784, 0.71283784, 0.71283784,\n",
      "       0.71283784, 0.71283784, 0.71452703, 0.71283784, 0.71283784,\n",
      "       0.71283784, 0.71283784, 0.71283784, 0.71283784, 0.71283784,\n",
      "       0.71283784, 0.71283784, 0.71283784, 0.71283784, 0.71283784,\n",
      "       0.71283784, 0.71283784, 0.71283784, 0.71283784, 0.71283784,\n",
      "       0.71283784, 0.71283784, 0.71283784, 0.71283784, 0.71283784,\n",
      "       0.71283784, 0.71283784, 0.71283784, 0.71283784, 0.71283784,\n",
      "       0.71283784, 0.71283784, 0.71283784, 0.71283784, 0.71283784,\n",
      "       0.71283784, 0.71283784, 0.71283784, 0.71283784, 0.71283784,\n",
      "       0.71283784, 0.71283784, 0.71283784, 0.71283784, 0.71283784,\n",
      "       0.71283784, 0.71283784, 0.71283784, 0.71283784, 0.71283784,\n",
      "       0.71283784, 0.71283784, 0.71283784, 0.71283784, 0.71283784,\n",
      "       0.71283784, 0.71283784, 0.71283784, 0.71283784, 0.71283784,\n",
      "       0.71283784, 0.71283784, 0.71283784, 0.71283784, 0.71283784,\n",
      "       0.71283784, 0.71283784, 0.71283784, 0.71283784, 0.71283784,\n",
      "       0.71283784, 0.71283784, 0.71283784, 0.71283784, 0.71283784]), 'split98_test_score': array([0.71790541, 0.71790541, 0.71790541, 0.71790541, 0.71790541,\n",
      "       0.71790541, 0.71790541, 0.72128378, 0.72128378, 0.72128378,\n",
      "       0.72128378, 0.71959459, 0.71959459, 0.71959459, 0.72128378,\n",
      "       0.72128378, 0.72128378, 0.72128378, 0.72128378, 0.72128378,\n",
      "       0.72128378, 0.72128378, 0.72128378, 0.72128378, 0.72128378,\n",
      "       0.72128378, 0.72128378, 0.72128378, 0.72128378, 0.72128378,\n",
      "       0.72128378, 0.72128378, 0.72128378, 0.72128378, 0.72128378,\n",
      "       0.72128378, 0.72128378, 0.72128378, 0.72128378, 0.72128378,\n",
      "       0.72128378, 0.72128378, 0.72128378, 0.72128378, 0.72128378,\n",
      "       0.72128378, 0.72128378, 0.72128378, 0.72128378, 0.72128378,\n",
      "       0.72128378, 0.72128378, 0.72128378, 0.72128378, 0.72128378,\n",
      "       0.72128378, 0.72128378, 0.72128378, 0.72128378, 0.72128378,\n",
      "       0.72128378, 0.72128378, 0.72128378, 0.72128378, 0.72128378,\n",
      "       0.72128378, 0.72128378, 0.72128378, 0.72128378, 0.72128378,\n",
      "       0.71959459, 0.71959459, 0.71959459, 0.72128378, 0.72128378,\n",
      "       0.72128378, 0.72128378, 0.72128378, 0.72128378, 0.72128378,\n",
      "       0.72128378, 0.72128378, 0.72128378, 0.72128378, 0.72128378,\n",
      "       0.72128378, 0.72128378, 0.72128378, 0.72128378, 0.72128378,\n",
      "       0.72128378, 0.72128378, 0.72128378, 0.72128378, 0.72128378,\n",
      "       0.72128378, 0.72128378, 0.72128378, 0.72128378, 0.72128378]), 'split99_test_score': array([0.72466216, 0.72466216, 0.72466216, 0.72466216, 0.72635135,\n",
      "       0.72635135, 0.72635135, 0.72466216, 0.72466216, 0.72466216,\n",
      "       0.72466216, 0.72466216, 0.72635135, 0.72635135, 0.72466216,\n",
      "       0.72466216, 0.72466216, 0.72466216, 0.72466216, 0.72635135,\n",
      "       0.72635135, 0.72466216, 0.72466216, 0.72466216, 0.72466216,\n",
      "       0.72466216, 0.72466216, 0.72635135, 0.72466216, 0.72466216,\n",
      "       0.72466216, 0.72466216, 0.72466216, 0.72466216, 0.72466216,\n",
      "       0.72466216, 0.72466216, 0.72466216, 0.72466216, 0.72466216,\n",
      "       0.72466216, 0.72466216, 0.72466216, 0.72466216, 0.72466216,\n",
      "       0.72466216, 0.72466216, 0.72466216, 0.72466216, 0.72466216,\n",
      "       0.72466216, 0.72466216, 0.72466216, 0.72466216, 0.72466216,\n",
      "       0.72466216, 0.72466216, 0.72466216, 0.72466216, 0.72466216,\n",
      "       0.72466216, 0.72466216, 0.72466216, 0.72466216, 0.72466216,\n",
      "       0.72466216, 0.72466216, 0.72466216, 0.72466216, 0.72466216,\n",
      "       0.72466216, 0.72466216, 0.72466216, 0.72466216, 0.72466216,\n",
      "       0.72466216, 0.72466216, 0.72466216, 0.72466216, 0.72466216,\n",
      "       0.72466216, 0.72466216, 0.72466216, 0.72466216, 0.72466216,\n",
      "       0.72466216, 0.72466216, 0.72466216, 0.72466216, 0.72466216,\n",
      "       0.72466216, 0.72466216, 0.72466216, 0.72466216, 0.72466216,\n",
      "       0.72466216, 0.72466216, 0.72466216, 0.72466216, 0.72466216]), 'mean_test_score': array([0.72562793, 0.72559424, 0.72550986, 0.72564477, 0.72571234,\n",
      "       0.72577988, 0.72581372, 0.72569536, 0.72576293, 0.72574612,\n",
      "       0.72567867, 0.72569553, 0.72574621, 0.72576307, 0.72576293,\n",
      "       0.72576298, 0.72566177, 0.72571236, 0.72574612, 0.7257799 ,\n",
      "       0.72574626, 0.72569544, 0.72571236, 0.72571236, 0.72567861,\n",
      "       0.72572923, 0.72571236, 0.72579677, 0.72571231, 0.72572923,\n",
      "       0.72569547, 0.72566172, 0.72567858, 0.72574609, 0.72576298,\n",
      "       0.72566172, 0.72569544, 0.72571234, 0.72566175, 0.72566175,\n",
      "       0.72564485, 0.72566172, 0.72566172, 0.72564483, 0.72567858,\n",
      "       0.72567861, 0.72564485, 0.72566172, 0.72566172, 0.72564483,\n",
      "       0.72561107, 0.72559421, 0.72564483, 0.72566172, 0.72567858,\n",
      "       0.72566175, 0.7256448 , 0.72561107, 0.72561107, 0.72561107,\n",
      "       0.72564483, 0.72562796, 0.72562796, 0.7256448 , 0.72564483,\n",
      "       0.72564483, 0.72562793, 0.72566169, 0.72564485, 0.72562796,\n",
      "       0.72572911, 0.72572911, 0.72572911, 0.72559415, 0.72561101,\n",
      "       0.72561101, 0.72572914, 0.72572914, 0.72571225, 0.72576293,\n",
      "       0.72574603, 0.72574603, 0.72574606, 0.72574606, 0.72571231,\n",
      "       0.72566172, 0.72566172, 0.72569544, 0.72567858, 0.72567858,\n",
      "       0.72569544, 0.72567858, 0.72569544, 0.72569544, 0.72566166,\n",
      "       0.72566166, 0.7256448 , 0.7256448 , 0.72567852, 0.72566166]), 'std_test_score': array([0.01797044, 0.017955  , 0.01795854, 0.01807506, 0.01799082,\n",
      "       0.01798089, 0.01791936, 0.01794334, 0.01799016, 0.01807125,\n",
      "       0.01810957, 0.01812233, 0.01807926, 0.01809036, 0.0179474 ,\n",
      "       0.01793546, 0.01799463, 0.01805385, 0.01811366, 0.01811942,\n",
      "       0.01802955, 0.01797865, 0.01796056, 0.01795587, 0.0179669 ,\n",
      "       0.01807769, 0.01810733, 0.01810852, 0.01795978, 0.0179719 ,\n",
      "       0.01797031, 0.01801296, 0.01801324, 0.01808577, 0.01807292,\n",
      "       0.01792097, 0.01797072, 0.01798478, 0.01796658, 0.01799821,\n",
      "       0.01800624, 0.01801443, 0.01792097, 0.01796877, 0.01798631,\n",
      "       0.01796369, 0.01796195, 0.01801128, 0.01801443, 0.01792747,\n",
      "       0.01795112, 0.0179381 , 0.01796241, 0.01796695, 0.01797989,\n",
      "       0.01796337, 0.01791837, 0.01792249, 0.01793999, 0.01793999,\n",
      "       0.01795762, 0.01795889, 0.0179478 , 0.01798174, 0.01795594,\n",
      "       0.01798452, 0.01798623, 0.01800378, 0.01794451, 0.0179478 ,\n",
      "       0.01789724, 0.01789724, 0.01789724, 0.01783204, 0.01780526,\n",
      "       0.01780526, 0.01792241, 0.01792241, 0.0179433 , 0.01792669,\n",
      "       0.01792852, 0.01792852, 0.01790905, 0.01790905, 0.01789158,\n",
      "       0.01792097, 0.01792097, 0.01790088, 0.01793394, 0.01793394,\n",
      "       0.01789293, 0.01791014, 0.01793103, 0.01789293, 0.01789326,\n",
      "       0.01789326, 0.01791996, 0.0179675 , 0.01793957, 0.01796621]), 'rank_test_score': array([ 90,  97, 100,  85,  32,   4,   1,  44,   9,  13,  45,  36,  12,\n",
      "         5,   9,   6,  55,  27,  13,   3,  11,  38,  27,  27,  47,  20,\n",
      "        27,   2,  33,  20,  37,  59,  49,  15,   7,  63,  38,  31,  56,\n",
      "        56,  72,  59,  63,  75,  49,  46,  72,  59,  59,  75,  91,  98,\n",
      "        75,  63,  49,  56,  83,  91,  91,  91,  75,  86,  86,  83,  75,\n",
      "        75,  89,  68,  74,  86,  24,  24,  24,  99,  95,  95,  22,  22,\n",
      "        35,   8,  18,  18,  16,  16,  34,  63,  63,  38,  49,  49,  38,\n",
      "        48,  38,  38,  69,  69,  81,  81,  54,  69], dtype=int32)}\n"
     ]
    }
   ],
   "source": [
    "print(gs.cv_results_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7258137163301583\n"
     ]
    }
   ],
   "source": [
    "print(gs.best_score_.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'logisticregression__C': 0.2, 'logisticregression__l1_ratio': 0.7, 'logisticregression__solver': 'saga'}\n"
     ]
    }
   ],
   "source": [
    "print(gs.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pipeline(memory=None,\n",
      "         steps=[('logisticregression',\n",
      "                 LogisticRegression(C=0.2, class_weight=None, dual=False,\n",
      "                                    fit_intercept=True, intercept_scaling=1,\n",
      "                                    l1_ratio=0.7, max_iter=100,\n",
      "                                    multi_class='auto', n_jobs=None,\n",
      "                                    penalty='elasticnet', random_state=None,\n",
      "                                    solver='saga', tol=0.0001, verbose=0,\n",
      "                                    warm_start=False))],\n",
      "         verbose=False)\n"
     ]
    }
   ],
   "source": [
    "print(gs.best_estimator_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "new=gs.best_estimator_\n",
    "y_pred_gs=new.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         Predict[0]  predict[1]\n",
      "True[0]        1413         512\n",
      "True[1]         596        1431\n",
      "Classification Report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.70      0.73      0.72      1925\n",
      "           1       0.74      0.71      0.72      2027\n",
      "\n",
      "    accuracy                           0.72      3952\n",
      "   macro avg       0.72      0.72      0.72      3952\n",
      "weighted avg       0.72      0.72      0.72      3952\n",
      "\n"
     ]
    }
   ],
   "source": [
    "confmat1=pd.DataFrame(confusion_matrix(y_test,y_pred_gs),\n",
    "index=['True[0]','True[1]'],\n",
    "columns=['Predict[0]','predict[1]'])\n",
    "print(confmat1)\n",
    "print('Classification Report')\n",
    "print(classification_report(y_test,y_pred_gs))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_sizes,train_scores,test_scores=\\\n",
    "    learning_curve(estimator=new,#수정\n",
    "    X=X_train,\n",
    "    y=y_train,\n",
    "    train_sizes=np.linspace(0.1,1.0,10),\n",
    "    n_jobs=-1,\n",
    "    cv=repert)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "train_mean=np.mean(train_scores,axis=1)\n",
    "train_std=np.std(train_scores,axis=1)\n",
    "test_mean=np.mean(test_scores,axis=1)\n",
    "\n",
    "test_std=np.std(test_scores,axis=1)\n",
    "\n",
    "plt.plot(train_sizes,train_mean,\n",
    "color='blue',marker='o',\n",
    "markersize=5,label='training accuracy')\n",
    "\n",
    "plt.fill_between(train_sizes,\n",
    "train_mean+train_std,\n",
    "train_mean-train_std,\n",
    "alpha=0.5,color='blue')\n",
    "\n",
    "plt.plot(train_sizes,test_mean,\n",
    "color='green',linestyle='--',\n",
    "marker='s',markersize=5,\n",
    "label='validation accuracy')\n",
    "plt.fill_between(train_sizes,\n",
    "test_mean+test_std,\n",
    "test_mean-test_std,\n",
    "alpha=0.15,color='green')\n",
    "\n",
    "plt.grid()\n",
    "plt.xlabel('number of trainning samples')\n",
    "plt.ylabel('accuracy')\n",
    "plt.legend(loc='lower right')\n",
    "plt.ylim([0,1.03])#수정  y값의 범위\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_logic=LogisticRegression(l1_ratio=0.5, penalty='elasticnet',\n",
    "                                    solver='saga',n_jobs=-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "                   intercept_scaling=1, l1_ratio=0.5, max_iter=100,\n",
       "                   multi_class='auto', n_jobs=-1, penalty='elasticnet',\n",
       "                   random_state=None, solver='saga', tol=0.0001, verbose=0,\n",
       "                   warm_start=False)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_logic.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "B값들 [[-0.02981764  0.022266    0.01955371  0.5882467  -0.62587011  0.01073639\n",
      "   0.1624061   0.08976385  0.17107454 -0.13268466 -0.00348866 -0.05796525\n",
      "  -0.0446998   0.20495335  0.35330126]]\n"
     ]
    }
   ],
   "source": [
    "print(\"B값들 {}\".format(new_logic.coef_))\n",
    "#골드차이가 가장 영향을준다는걸 알수있다"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "fram=pd.DataFrame(data=X_train,columns=col)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           B와드     B와드파괴       B퍼블        B킬       B데스     B어시스트    B드래곤전령  \\\n",
      "0     0.911867  0.542521 -0.995455 -0.052946 -0.056005 -0.649430 -0.751176   \n",
      "1    -0.455503  0.085121  1.004566 -1.382662 -0.394034 -1.142598 -0.751176   \n",
      "2    -0.350321  3.286921  1.004566 -0.717804 -1.408121 -0.649430 -0.751176   \n",
      "3    -0.455503  0.085121 -0.995455  0.279483  1.296110 -0.649430  1.331246   \n",
      "4    -0.192547  2.372121 -0.995455 -1.382662 -0.732063 -1.142598 -0.751176   \n",
      "...        ...       ...       ...       ...       ...       ...       ...   \n",
      "5922 -0.350321  0.085121 -0.995455 -1.382662 -0.394034 -1.389182 -0.751176   \n",
      "5923 -0.350321 -0.372279  1.004566  1.941627 -0.056005  0.830073  1.331246   \n",
      "5924 -0.402912 -0.829679  1.004566  1.609198 -1.070092  1.076657  1.331246   \n",
      "5925 -0.455503 -0.829679 -0.995455  0.279483  0.620052  0.336905 -0.751176   \n",
      "5926 -0.297730 -0.372279 -0.995455 -0.717804 -0.056005 -0.896014 -0.751176   \n",
      "\n",
      "         B타워파괴    B정글몬스터      R드래곤     R타워파괴       RCS    R정글몬스터    분당cs차이  \\\n",
      "0    -0.206072  0.154889  1.184689 -0.196571  1.365936  1.052719 -1.064914   \n",
      "1    -0.206072  0.558596  1.184689 -0.196571  1.320339  0.657735 -0.578382   \n",
      "2    -0.206072 -0.349744 -0.844104 -0.196571  1.046756  0.460243 -0.416205   \n",
      "3     3.948314 -0.652524 -0.844104 -0.196571  0.408397 -0.823456 -0.805430   \n",
      "4    -0.206072 -0.753450 -0.844104 -0.196571  0.864368 -0.132233  0.005456   \n",
      "...        ...       ...       ...       ...       ...       ...       ...   \n",
      "5922 -0.206072  0.962302  1.184689 -0.196571  0.590785  1.348958  0.135198   \n",
      "5923 -0.206072 -0.248817 -0.844104 -0.196571 -0.913919  1.250212  1.465052   \n",
      "5924 -0.206072  0.962302 -0.844104 -0.196571  0.089217 -0.724710 -0.156721   \n",
      "5925 -0.206072 -0.551597  1.184689 -0.196571  0.545188 -0.428472  0.459552   \n",
      "5926 -0.206072  0.558596  1.184689 -0.196571  0.636382  0.855227  0.232504   \n",
      "\n",
      "          레벨차이  \n",
      "0     0.428544  \n",
      "1    -0.400972  \n",
      "2     0.013786  \n",
      "3    -1.645246  \n",
      "4     0.013786  \n",
      "...        ...  \n",
      "5922  0.013786  \n",
      "5923  1.672818  \n",
      "5924  1.672818  \n",
      "5925  0.013786  \n",
      "5926  0.013786  \n",
      "\n",
      "[5927 rows x 15 columns]\n"
     ]
    }
   ],
   "source": [
    "print(fram)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "corr=X.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             B와드     B와드파괴       B퍼블        B킬       B데스     B어시스트    B드래곤전령  \\\n",
      "B와드     1.000000  0.034447  0.003228  0.018138 -0.002612  0.033217  0.017676   \n",
      "B와드파괴   0.034447  1.000000  0.017717  0.033748 -0.073182  0.067793  0.040504   \n",
      "B퍼블     0.003228  0.017717  1.000000  0.269425 -0.247929  0.229485  0.134309   \n",
      "B킬      0.018138  0.033748  0.269425  1.000000  0.004044  0.813667  0.170436   \n",
      "B데스    -0.002612 -0.073182 -0.247929  0.004044  1.000000 -0.026372 -0.188852   \n",
      "B어시스트   0.033217  0.067793  0.229485  0.813667 -0.026372  1.000000  0.170873   \n",
      "B드래곤전령  0.017676  0.040504  0.134309  0.170436 -0.188852  0.170873  1.000000   \n",
      "B타워파괴   0.009462 -0.009150  0.083316  0.180314 -0.071441  0.123663  0.039750   \n",
      "B정글몬스터  0.010501 -0.023452  0.018190 -0.112506 -0.228102 -0.134023  0.159595   \n",
      "R드래곤   -0.020121 -0.034439 -0.135327 -0.207949  0.150746 -0.189563 -0.631930   \n",
      "R타워파괴  -0.008225 -0.023943 -0.069584 -0.082491  0.156780 -0.060880 -0.032865   \n",
      "RCS    -0.012395  0.040023 -0.156711 -0.472203 -0.040521 -0.337515 -0.059803   \n",
      "R정글몬스터  0.001224 -0.035732 -0.024559 -0.214454 -0.100271 -0.160915 -0.098446   \n",
      "분당cs차이 -0.015188  0.050091  0.199729  0.312570 -0.302305  0.195184  0.103585   \n",
      "레벨차이    0.027576  0.076164  0.229811  0.540415 -0.541094  0.414433  0.198082   \n",
      "\n",
      "           B타워파괴    B정글몬스터      R드래곤     R타워파괴       RCS    R정글몬스터    분당cs차이  \\\n",
      "B와드     0.009462  0.010501 -0.020121 -0.008225 -0.012395  0.001224 -0.015188   \n",
      "B와드파괴  -0.009150 -0.023452 -0.034439 -0.023943  0.040023 -0.035732  0.050091   \n",
      "B퍼블     0.083316  0.018190 -0.135327 -0.069584 -0.156711 -0.024559  0.199729   \n",
      "B킬      0.180314 -0.112506 -0.207949 -0.082491 -0.472203 -0.214454  0.312570   \n",
      "B데스    -0.071441 -0.228102  0.150746  0.156780 -0.040521 -0.100271 -0.302305   \n",
      "B어시스트   0.123663 -0.134023 -0.189563 -0.060880 -0.337515 -0.160915  0.195184   \n",
      "B드래곤전령  0.039750  0.159595 -0.631930 -0.032865 -0.059803 -0.098446  0.103585   \n",
      "B타워파괴   1.000000  0.008165 -0.028482  0.011738 -0.186879 -0.038505  0.197532   \n",
      "B정글몬스터  0.008165  1.000000 -0.053295 -0.048078  0.109806 -0.026363  0.043945   \n",
      "R드래곤   -0.028482 -0.053295  1.000000  0.026950  0.103151  0.214187 -0.111162   \n",
      "R타워파괴   0.011738 -0.048078  0.026950  1.000000  0.092564  0.006374 -0.168667   \n",
      "RCS    -0.186879  0.109806  0.103151  0.092564  1.000000  0.165652 -0.707796   \n",
      "R정글몬스터 -0.038505 -0.026363  0.214187  0.006374  0.165652  1.000000 -0.052155   \n",
      "분당cs차이  0.197532  0.043945 -0.111162 -0.168667 -0.707796 -0.052155  1.000000   \n",
      "레벨차이    0.209832  0.245719 -0.210127 -0.188908 -0.391134 -0.252151  0.569276   \n",
      "\n",
      "            레벨차이  \n",
      "B와드     0.027576  \n",
      "B와드파괴   0.076164  \n",
      "B퍼블     0.229811  \n",
      "B킬      0.540415  \n",
      "B데스    -0.541094  \n",
      "B어시스트   0.414433  \n",
      "B드래곤전령  0.198082  \n",
      "B타워파괴   0.209832  \n",
      "B정글몬스터  0.245719  \n",
      "R드래곤   -0.210127  \n",
      "R타워파괴  -0.188908  \n",
      "RCS    -0.391134  \n",
      "R정글몬스터 -0.252151  \n",
      "분당cs차이  0.569276  \n",
      "레벨차이    1.000000  \n"
     ]
    }
   ],
   "source": [
    "print(corr)\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 50752 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 46300 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 54028 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 44340 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 54140 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 48660 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 53420 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 45936 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 49828 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 50612 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 49884 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 53944 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 47000 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 44260 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 51204 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 47161 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 53440 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 50892 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 51221 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 44544 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 47788 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 53552 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 48516 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 45817 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 52264 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 51060 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 47112 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 48296 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:180: RuntimeWarning: Glyph 50752 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:180: RuntimeWarning: Glyph 46300 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:180: RuntimeWarning: Glyph 54028 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:180: RuntimeWarning: Glyph 44340 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:180: RuntimeWarning: Glyph 54140 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:180: RuntimeWarning: Glyph 48660 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:180: RuntimeWarning: Glyph 53420 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:180: RuntimeWarning: Glyph 45936 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:180: RuntimeWarning: Glyph 49828 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:180: RuntimeWarning: Glyph 50612 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:180: RuntimeWarning: Glyph 49884 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:180: RuntimeWarning: Glyph 53944 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:180: RuntimeWarning: Glyph 47000 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:180: RuntimeWarning: Glyph 44260 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:180: RuntimeWarning: Glyph 51204 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:180: RuntimeWarning: Glyph 47161 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:180: RuntimeWarning: Glyph 53440 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:180: RuntimeWarning: Glyph 50892 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:180: RuntimeWarning: Glyph 51221 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:180: RuntimeWarning: Glyph 44544 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:180: RuntimeWarning: Glyph 47788 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:180: RuntimeWarning: Glyph 53552 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:180: RuntimeWarning: Glyph 48516 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:180: RuntimeWarning: Glyph 45817 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:180: RuntimeWarning: Glyph 52264 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:180: RuntimeWarning: Glyph 51060 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:180: RuntimeWarning: Glyph 47112 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n",
      "/Users/leonilpark/opt/anaconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:180: RuntimeWarning: Glyph 48296 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1080 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,15))\n",
    "sns.heatmap(data=corr,annot=True,fmt='.2f')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.536300\n",
      "         Iterations 6\n"
     ]
    }
   ],
   "source": [
    "import statsmodels.api as sm\n",
    "\n",
    "xts=StandardScaler()\n",
    "X=xts.fit_transform(X)\n",
    "logit_mod=sm.Logit(y,X)\n",
    "result=logit_mod.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:                     B승   No. Observations:                 9879\n",
      "Model:                          Logit   Df Residuals:                     9864\n",
      "Method:                           MLE   Df Model:                           14\n",
      "Date:                Fri, 31 Jul 2020   Pseudo R-squ.:                  0.2263\n",
      "Time:                        13:20:45   Log-Likelihood:                -5298.1\n",
      "converged:                       True   LL-Null:                       -6847.6\n",
      "Covariance Type:            nonrobust   LLR p-value:                     0.000\n",
      "==============================================================================\n",
      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "x1            -0.0266      0.024     -1.125      0.261      -0.073       0.020\n",
      "x2             0.0048      0.024      0.199      0.842      -0.043       0.052\n",
      "x3             0.0625      0.025      2.500      0.012       0.014       0.112\n",
      "x4             0.5787      0.051     11.244      0.000       0.478       0.680\n",
      "x5            -0.5833      0.037    -15.956      0.000      -0.655      -0.512\n",
      "x6             0.0320      0.042      0.754      0.451      -0.051       0.115\n",
      "x7             0.1474      0.031      4.754      0.000       0.087       0.208\n",
      "x8             0.0920      0.030      3.083      0.002       0.033       0.150\n",
      "x9             0.1731      0.027      6.485      0.000       0.121       0.225\n",
      "x10           -0.1140      0.031     -3.659      0.000      -0.175      -0.053\n",
      "x11           -0.0472      0.028     -1.690      0.091      -0.102       0.008\n",
      "x12            0.0133      0.040      0.337      0.736      -0.064       0.091\n",
      "x13           -0.0950      0.027     -3.549      0.000      -0.147      -0.043\n",
      "x14            0.2529      0.041      6.132      0.000       0.172       0.334\n",
      "x15            0.3409      0.046      7.334      0.000       0.250       0.432\n",
      "==============================================================================\n"
     ]
    }
   ],
   "source": [
    "print(result.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x1     0.973797\n",
      "x2     1.004822\n",
      "x3     1.064504\n",
      "x4     1.783728\n",
      "x5     0.558072\n",
      "x6     1.032507\n",
      "x7     1.158843\n",
      "x8     1.096316\n",
      "x9     1.188934\n",
      "x10    0.892214\n",
      "x11    0.953905\n",
      "x12    1.013409\n",
      "x13    0.909354\n",
      "x14    1.287761\n",
      "x15    1.406182\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(np.exp(result.params))\n",
    "#회귀분석에선 레벨차이가 가장영향을 미친다"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['B와드', 'B와드파괴', 'B퍼블', 'B킬', 'B데스', 'B어시스트', 'B드래곤전령', 'B타워파괴',\n",
      "       'B정글몬스터', 'R드래곤', 'R타워파괴', 'RCS', 'R정글몬스터', '분당cs차이', '레벨차이'],\n",
      "      dtype='object')\n",
      "      B와드  B와드파괴  B퍼블  B킬  B데스  B어시스트  B드래곤전령  B타워파괴  B정글몬스터  R드래곤  R타워파괴  \\\n",
      "0      28      2    1   9    6     11       0      0      36     0      0   \n",
      "1      12      1    0   5    5      5       0      0      43     1      1   \n",
      "2      15      0    0   7   11      4       1      0      46     0      0   \n",
      "3      43      1    0   4    5      5       0      0      55     0      0   \n",
      "4      75      4    0   6    6      6       0      0      57     1      0   \n",
      "...   ...    ...  ...  ..  ...    ...     ...    ...     ...   ...    ...   \n",
      "9874   17      2    1   7    4      5       1      0      69     0      0   \n",
      "9875   54      0    0   6    4      8       1      0      48     0      0   \n",
      "9876   23      1    0   6    7      5       0      0      45     1      0   \n",
      "9877   14      4    1   2    3      3       1      0      48     0      0   \n",
      "9878   18      0    1   6    6      5       0      0      44     1      0   \n",
      "\n",
      "      RCS  R정글몬스터  분당cs차이  레벨차이  \n",
      "0     197      55    -0.2  -0.2  \n",
      "1     240      52    -6.6  -0.2  \n",
      "2     203      28    -1.7  -0.4  \n",
      "3     235      47    -3.4   0.0  \n",
      "4     225      67    -1.5   0.0  \n",
      "...   ...     ...     ...   ...  \n",
      "9874  229      34    -1.8   0.4  \n",
      "9875  206      56     2.7   0.2  \n",
      "9876  261      60    -5.1  -0.4  \n",
      "9877  247      40    -2.3  -0.6  \n",
      "9878  201      46     0.6   0.2  \n",
      "\n",
      "[9879 rows x 15 columns]\n"
     ]
    }
   ],
   "source": [
    "print(t.columns)\n",
    "print(t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "x=t[['B와드파괴', 'B퍼블', 'B킬','B드래곤전령','B타워파괴','B정글몬스터','R정글몬스터', '분당cs차이', '레벨차이']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(9879,)\n",
      "(9879, 9)\n"
     ]
    }
   ],
   "source": [
    "print(y.shape)\n",
    "print(x.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train,X_test,y_train,y_test=\\\n",
    "    train_test_split(x,y,\n",
    "    test_size=0.4,\n",
    "    train_size=0.6,\n",
    "    random_state=12354,\n",
    "    shuffle=True)\n",
    "\n",
    "\n",
    "stdc=StandardScaler()\n",
    "X_train=stdc.fit_transform(X_train)\n",
    "X_test=stdc.transform(X_test)\n",
    "#x 데이터들을 표준화실시"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "#모델구축\n",
    "logic=LogisticRegression(penalty='elasticnet',solver='saga',n_jobs=-1,l1_ratio=0.4)\n",
    "logic.fit(X_train,y_train)\n",
    "y_pred=logic.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "confmat=pd.DataFrame(confusion_matrix(y_test,y_pred),\n",
    "index=['True[0]','True[1]'],\n",
    "columns=['Predict[0]','predict[1]'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         Predict[0]  predict[1]\n",
      "True[0]        1429         496\n",
      "True[1]         647        1380\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.69      0.74      0.71      1925\n",
      "           1       0.74      0.68      0.71      2027\n",
      "\n",
      "    accuracy                           0.71      3952\n",
      "   macro avg       0.71      0.71      0.71      3952\n",
      "weighted avg       0.71      0.71      0.71      3952\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(confmat)\n",
    "print(classification_report(y_test,y_pred)) \n",
    "# 현재 정확도 73%\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "from sklearn.metrics import auc\n",
    "from sklearn.metrics import plot_roc_curve\n",
    "\n",
    "#동일한분포 아닐경우\n",
    "from sklearn.model_selection import RepeatedKFold\n",
    "#동일한분포이며, 특징들이 독립적일경우\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.model_selection import KFold\n",
    "repert=RepeatedKFold(n_splits=10,n_repeats=10)\n",
    "stkfold=StratifiedKFold(n_splits=10,shuffle=True)\n",
    "fold=KFold(n_splits=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_sizes,train_scores,test_scores=\\\n",
    "    learning_curve(estimator=logic,#수정\n",
    "    X=X_train,\n",
    "    y=y_train,\n",
    "    train_sizes=np.linspace(0.1,1.0,10),\n",
    "    n_jobs=-1,\n",
    "    cv=fold)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_mean=np.mean(train_scores,axis=1)\n",
    "train_std=np.std(train_scores,axis=1)\n",
    "test_mean=np.mean(test_scores,axis=1)\n",
    "\n",
    "test_std=np.std(test_scores,axis=1)\n",
    "\n",
    "plt.plot(train_sizes,train_mean,\n",
    "color='blue',marker='o',\n",
    "markersize=5,label='training accuracy')\n",
    "\n",
    "plt.fill_between(train_sizes,\n",
    "train_mean+train_std,\n",
    "train_mean-train_std,\n",
    "alpha=0.5,color='blue')\n",
    "\n",
    "plt.plot(train_sizes,test_mean,\n",
    "color='green',linestyle='--',\n",
    "marker='s',markersize=5,\n",
    "label='validation accuracy')\n",
    "plt.fill_between(train_sizes,\n",
    "test_mean+test_std,\n",
    "test_mean-test_std,\n",
    "alpha=0.15,color='green')\n",
    "\n",
    "plt.grid()\n",
    "plt.xlabel('number of trainning samples')\n",
    "plt.ylabel('accuracy')\n",
    "plt.legend(loc='lower right')\n",
    "plt.ylim([0,1.03])#수정  y값의 범위\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "cross_kfold=cross_validate(estimator=logic,X=X_train,y=y_train,cv=fold,n_jobs=-1,\n",
    "                          scoring=['accuracy','roc_auc'])\n",
    "\n",
    "cross_repeat=cross_validate(estimator=logic,X=X_train,y=y_train,cv=repert,n_jobs=-1,scoring=['accuracy','roc_auc'])\n",
    "                          \n",
    "normal=cross_validate(estimator=logic,X=X_train,y=y_train,cv=10,n_jobs=-1,\n",
    "                          scoring=['accuracy','roc_auc'])\n",
    "\n",
    "cross_stfold=cross_validate(estimator=logic,X=X_train,y=y_train,cv=stkfold,n_jobs=-1,\n",
    "                          scoring=['accuracy','roc_auc'])\n",
    "#scoring 은 https://scikit-learn.org/stable/modules/model_evaluation.html#scoring-parameter\n",
    "#에서 참고"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
